{"ast":null,"code":"/**\n * find an simliar node in a list of nodes\n * which is not exactly the same node\n * @hotpath\n */\nexport function findSimilarNode(own, others) {\n  const ownString = own.toString();\n  for (let i = 0; i < others.length; i++) {\n    const other = others[i];\n    if (own !== other && !other.deleted && own.isEqualToOtherNode(other, ownString)) {\n      return other;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["findSimilarNode","own","others","ownString","toString","i","length","other","deleted","isEqualToOtherNode"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/binary-decision-diagram/src/find-similar-node.ts"],"sourcesContent":["import { AbstractNode } from './abstract-node.js';\n\n/**\n * find an simliar node in a list of nodes\n * which is not exactly the same node\n * @hotpath\n */\nexport function findSimilarNode<T extends AbstractNode>(\n    own: T,\n    others: T[]\n): T | null {\n    const ownString = own.toString();\n    for (let i = 0; i < others.length; i++) {\n        const other = others[i];\n        if (\n            own !== other &&\n            !other.deleted &&\n            own.isEqualToOtherNode(\n                other as any,\n                ownString\n            )\n        ) {\n            return other;\n        }\n    }\n    return null;\n}\n"],"mappings":"AAEA;;;;;AAKA,OAAM,SAAUA,eAAeA,CAC3BC,GAAM,EACNC,MAAW;EAEX,MAAMC,SAAS,GAAGF,GAAG,CAACG,QAAQ,EAAE;EAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,KAAK,GAAGL,MAAM,CAACG,CAAC,CAAC;IACvB,IACIJ,GAAG,KAAKM,KAAK,IACb,CAACA,KAAK,CAACC,OAAO,IACdP,GAAG,CAACQ,kBAAkB,CAClBF,KAAY,EACZJ,SAAS,CACZ,EACH;MACE,OAAOI,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}