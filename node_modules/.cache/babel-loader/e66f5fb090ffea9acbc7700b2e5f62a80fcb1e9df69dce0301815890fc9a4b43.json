{"ast":null,"code":"/**\n * Type Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#type-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { isNil, isNumber } from \"../../../util\";\nimport { TypeConvertError } from \"./_internal\";\n/**\n * Converts a value to a double. If the value cannot be converted to an double, $toDouble errors. If the value is null or missing, $toDouble returns null.\n *\n * @param obj\n * @param expr\n */\nexport const $toDouble = (obj, expr, options) => {\n  const val = computeValue(obj, expr, null, options);\n  if (isNil(val)) return null;\n  if (val instanceof Date) return val.getTime();\n  if (val === true) return 1;\n  if (val === false) return 0;\n  const n = Number(val);\n  if (isNumber(n)) return n;\n  throw new TypeConvertError(`cannot convert '${val}' to double/decimal`);\n};","map":{"version":3,"names":["computeValue","isNil","isNumber","TypeConvertError","$toDouble","obj","expr","options","val","Date","getTime","n","Number"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/type/toDouble.js"],"sourcesContent":["/**\n * Type Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#type-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { isNil, isNumber } from \"../../../util\";\nimport { TypeConvertError } from \"./_internal\";\n/**\n * Converts a value to a double. If the value cannot be converted to an double, $toDouble errors. If the value is null or missing, $toDouble returns null.\n *\n * @param obj\n * @param expr\n */\nexport const $toDouble = (obj, expr, options) => {\n    const val = computeValue(obj, expr, null, options);\n    if (isNil(val))\n        return null;\n    if (val instanceof Date)\n        return val.getTime();\n    if (val === true)\n        return 1;\n    if (val === false)\n        return 0;\n    const n = Number(val);\n    if (isNumber(n))\n        return n;\n    throw new TypeConvertError(`cannot convert '${val}' to double/decimal`);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AAC/C,SAASC,gBAAgB,QAAQ,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC7C,MAAMC,GAAG,GAAGR,YAAY,CAACK,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EAClD,IAAIN,KAAK,CAACO,GAAG,CAAC,EACV,OAAO,IAAI;EACf,IAAIA,GAAG,YAAYC,IAAI,EACnB,OAAOD,GAAG,CAACE,OAAO,CAAC,CAAC;EACxB,IAAIF,GAAG,KAAK,IAAI,EACZ,OAAO,CAAC;EACZ,IAAIA,GAAG,KAAK,KAAK,EACb,OAAO,CAAC;EACZ,MAAMG,CAAC,GAAGC,MAAM,CAACJ,GAAG,CAAC;EACrB,IAAIN,QAAQ,CAACS,CAAC,CAAC,EACX,OAAOA,CAAC;EACZ,MAAM,IAAIR,gBAAgB,CAAC,mBAAmBK,GAAG,qBAAqB,CAAC;AAC3E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}