{"ast":null,"code":"import { Branches } from './branches.js';\nimport { Parents } from './parents.js';\nimport { AbstractNode } from './abstract-node.js';\nexport class InternalNode extends AbstractNode {\n  branches = new Branches(this);\n  parents = new Parents(this);\n  constructor(level, rootNode, parent) {\n    super(level, rootNode, 'InternalNode');\n    this.parents.add(parent);\n  }\n  /**\n   * by the reduction-rule of bdd,\n   * if both branches are equal,\n   * we can remove this node from the bdd\n   */\n  applyReductionRule() {\n    // console.log('applyReductionRule() ' + this.id);\n    if (this.branches.hasEqualBranches()) {\n      this.ensureNotDeleted('applyReductionRule');\n      const keepBranch = this.branches.getBranch('0');\n      // move own parents to keepBranch\n      const ownParents = this.parents.getAll();\n      ownParents.forEach(parent => {\n        // console.log('ownParent: ' + parent.id);\n        const branchKey = parent.branches.getKeyOfNode(this);\n        parent.branches.setBranch(branchKey, keepBranch);\n        // remove parents from own list\n        // this will auto-remove the connection to the other '1'-branch\n        this.parents.remove(parent);\n        // if parent has now two equal branches,\n        // we have to apply the reduction again\n        // to ensure we end in a valid state\n        if (parent.branches.areBranchesStrictEqual() && parent.isInternalNode()) {\n          parent.applyReductionRule();\n        }\n      });\n      return true;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["Branches","Parents","AbstractNode","InternalNode","branches","parents","constructor","level","rootNode","parent","add","applyReductionRule","hasEqualBranches","ensureNotDeleted","keepBranch","getBranch","ownParents","getAll","forEach","branchKey","getKeyOfNode","setBranch","remove","areBranchesStrictEqual","isInternalNode"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/binary-decision-diagram/src/internal-node.ts"],"sourcesContent":["import { Branches } from './branches.js';\nimport { Parents } from './parents.js';\nimport { RootNode } from './root-node.js';\nimport { AbstractNode } from './abstract-node.js';\nimport type { NonLeafNode, NonRootNode } from './types.js';\n\nexport class InternalNode extends AbstractNode {\n    public branches: Branches = new Branches(this);\n    public parents = new Parents(this);\n\n    constructor(\n        level: number,\n        rootNode: RootNode,\n        parent: NonLeafNode\n    ) {\n        super(level, rootNode, 'InternalNode');\n        this.parents.add(parent);\n    }\n\n\n\n    /**\n     * by the reduction-rule of bdd,\n     * if both branches are equal,\n     * we can remove this node from the bdd\n     */\n    applyReductionRule(): boolean {\n\n        // console.log('applyReductionRule() ' + this.id);\n\n        if (this.branches.hasEqualBranches()) {\n            this.ensureNotDeleted('applyReductionRule');\n            const keepBranch: NonRootNode = this.branches.getBranch('0');\n\n            // move own parents to keepBranch\n            const ownParents = this.parents.getAll();\n            ownParents.forEach(parent => {\n                // console.log('ownParent: ' + parent.id);\n                const branchKey = parent.branches.getKeyOfNode(this);\n                parent.branches.setBranch(branchKey, keepBranch);\n\n                // remove parents from own list\n                // this will auto-remove the connection to the other '1'-branch\n                this.parents.remove(parent);\n\n                // if parent has now two equal branches,\n                // we have to apply the reduction again\n                // to ensure we end in a valid state\n                if (parent.branches.areBranchesStrictEqual() && parent.isInternalNode()) {\n                    (parent as InternalNode).applyReductionRule();\n                }\n            });\n\n            return true;\n        }\n        return false;\n    }\n\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,OAAO,QAAQ,cAAc;AAEtC,SAASC,YAAY,QAAQ,oBAAoB;AAGjD,OAAM,MAAOC,YAAa,SAAQD,YAAY;EACnCE,QAAQ,GAAa,IAAIJ,QAAQ,CAAC,IAAI,CAAC;EACvCK,OAAO,GAAG,IAAIJ,OAAO,CAAC,IAAI,CAAC;EAElCK,YACIC,KAAa,EACbC,QAAkB,EAClBC,MAAmB;IAEnB,KAAK,CAACF,KAAK,EAAEC,QAAQ,EAAE,cAAc,CAAC;IACtC,IAAI,CAACH,OAAO,CAACK,GAAG,CAACD,MAAM,CAAC;EAC5B;EAIA;;;;;EAKAE,kBAAkBA,CAAA;IAEd;IAEA,IAAI,IAAI,CAACP,QAAQ,CAACQ,gBAAgB,EAAE,EAAE;MAClC,IAAI,CAACC,gBAAgB,CAAC,oBAAoB,CAAC;MAC3C,MAAMC,UAAU,GAAgB,IAAI,CAACV,QAAQ,CAACW,SAAS,CAAC,GAAG,CAAC;MAE5D;MACA,MAAMC,UAAU,GAAG,IAAI,CAACX,OAAO,CAACY,MAAM,EAAE;MACxCD,UAAU,CAACE,OAAO,CAACT,MAAM,IAAG;QACxB;QACA,MAAMU,SAAS,GAAGV,MAAM,CAACL,QAAQ,CAACgB,YAAY,CAAC,IAAI,CAAC;QACpDX,MAAM,CAACL,QAAQ,CAACiB,SAAS,CAACF,SAAS,EAAEL,UAAU,CAAC;QAEhD;QACA;QACA,IAAI,CAACT,OAAO,CAACiB,MAAM,CAACb,MAAM,CAAC;QAE3B;QACA;QACA;QACA,IAAIA,MAAM,CAACL,QAAQ,CAACmB,sBAAsB,EAAE,IAAId,MAAM,CAACe,cAAc,EAAE,EAAE;UACpEf,MAAuB,CAACE,kBAAkB,EAAE;QACjD;MACJ,CAAC,CAAC;MAEF,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}