{"ast":null,"code":"import * as RxDB from 'rxdb';\nimport { RxDBAdapterIDB } from 'rxdb/plugins/adapter-idb'; // Make sure to use the correct import for IDB adapter\n\nRxDB.plugin(RxDBAdapterIDB); // Initialize IDB adapter\n\nlet dbPromise = null;\nconst createRxDB = async () => {\n  const db = await RxDB.create({\n    name: 'tasksdb',\n    // Database name\n    adapter: 'idb',\n    // Use IndexedDB\n    password: 'myLongAndSturdyPassword',\n    // Optional encryption password\n    multiInstance: true // Enable multiInstance\n  });\n\n  // Define schema for tasks collection\n  await db.collection({\n    name: 'tasks',\n    schema: {\n      title: 'tasks schema',\n      version: 0,\n      properties: {\n        taskName: {\n          type: 'string'\n        },\n        progress: {\n          type: 'string'\n        },\n        description: {\n          type: 'string'\n        },\n        dueDate: {\n          type: 'string'\n        },\n        priority: {\n          type: 'string'\n        },\n        createdAt: {\n          type: 'string',\n          format: 'date-time'\n        }\n      },\n      primaryKey: 'taskName',\n      // Define primary key\n      indexes: ['progress', 'dueDate'] // Define indexes\n    }\n  });\n  return db;\n};\nexport const getDatabase = async () => {\n  if (!dbPromise) {\n    dbPromise = createRxDB();\n  }\n  return dbPromise;\n};","map":{"version":3,"names":["RxDB","RxDBAdapterIDB","plugin","dbPromise","createRxDB","db","create","name","adapter","password","multiInstance","collection","schema","title","version","properties","taskName","type","progress","description","dueDate","priority","createdAt","format","primaryKey","indexes","getDatabase"],"sources":["/Users/abdelghanem/Desktop/tasker/src/services/db.js"],"sourcesContent":["import * as RxDB from 'rxdb';\nimport { RxDBAdapterIDB } from 'rxdb/plugins/adapter-idb'; // Make sure to use the correct import for IDB adapter\n\nRxDB.plugin(RxDBAdapterIDB); // Initialize IDB adapter\n\n\nlet dbPromise = null;\n\nconst createRxDB = async () => {\n  const db = await RxDB.create({\n    name: 'tasksdb', // Database name\n    adapter: 'idb', // Use IndexedDB\n    password: 'myLongAndSturdyPassword', // Optional encryption password\n    multiInstance: true, // Enable multiInstance\n  });\n\n  // Define schema for tasks collection\n  await db.collection({\n    name: 'tasks',\n    schema: {\n      title: 'tasks schema',\n      version: 0,\n      properties: {\n        taskName: { type: 'string' },\n        progress: { type: 'string' },\n        description: { type: 'string' },\n        dueDate: { type: 'string' },\n        priority: { type: 'string' },\n        createdAt: { type: 'string', format: 'date-time' },\n      },\n      primaryKey: 'taskName', // Define primary key\n      indexes: ['progress', 'dueDate'], // Define indexes\n    },\n  });\n\n  return db;\n};\n\nexport const getDatabase = async () => {\n  if (!dbPromise) {\n    dbPromise = createRxDB();\n  }\n  return dbPromise;\n};\n\n"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAC5B,SAASC,cAAc,QAAQ,0BAA0B,CAAC,CAAC;;AAE3DD,IAAI,CAACE,MAAM,CAACD,cAAc,CAAC,CAAC,CAAC;;AAG7B,IAAIE,SAAS,GAAG,IAAI;AAEpB,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,EAAE,GAAG,MAAML,IAAI,CAACM,MAAM,CAAC;IAC3BC,IAAI,EAAE,SAAS;IAAE;IACjBC,OAAO,EAAE,KAAK;IAAE;IAChBC,QAAQ,EAAE,yBAAyB;IAAE;IACrCC,aAAa,EAAE,IAAI,CAAE;EACvB,CAAC,CAAC;;EAEF;EACA,MAAML,EAAE,CAACM,UAAU,CAAC;IAClBJ,IAAI,EAAE,OAAO;IACbK,MAAM,EAAE;MACNC,KAAK,EAAE,cAAc;MACrBC,OAAO,EAAE,CAAC;MACVC,UAAU,EAAE;QACVC,QAAQ,EAAE;UAAEC,IAAI,EAAE;QAAS,CAAC;QAC5BC,QAAQ,EAAE;UAAED,IAAI,EAAE;QAAS,CAAC;QAC5BE,WAAW,EAAE;UAAEF,IAAI,EAAE;QAAS,CAAC;QAC/BG,OAAO,EAAE;UAAEH,IAAI,EAAE;QAAS,CAAC;QAC3BI,QAAQ,EAAE;UAAEJ,IAAI,EAAE;QAAS,CAAC;QAC5BK,SAAS,EAAE;UAAEL,IAAI,EAAE,QAAQ;UAAEM,MAAM,EAAE;QAAY;MACnD,CAAC;MACDC,UAAU,EAAE,UAAU;MAAE;MACxBC,OAAO,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC,CAAE;IACpC;EACF,CAAC,CAAC;EAEF,OAAOpB,EAAE;AACX,CAAC;AAED,OAAO,MAAMqB,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI,CAACvB,SAAS,EAAE;IACdA,SAAS,GAAGC,UAAU,CAAC,CAAC;EAC1B;EACA,OAAOD,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}