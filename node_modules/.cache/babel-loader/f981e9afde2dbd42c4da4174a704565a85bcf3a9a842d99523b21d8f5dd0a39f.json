{"ast":null,"code":"import { Aggregator } from \"./aggregator\";\nimport { compose, Lazy } from \"./lazy\";\nimport { isObject } from \"./util\";\n/**\n * Cursor to iterate and perform filtering on matched objects.\n * This object must not be used directly. A cursor may be obtaine from calling `find()` on an instance of `Query`.\n *\n * @param collection The input source of the collection\n * @param predicate A predicate function to test documents\n * @param projection A projection criteria\n * @param options Options\n * @constructor\n */\nexport class Cursor {\n  constructor(source, predicate, projection, options) {\n    this.source = source;\n    this.predicate = predicate;\n    this.projection = projection;\n    this.options = options;\n    this.operators = [];\n    this.result = null;\n    this.buffer = [];\n  }\n  /** Returns the iterator from running the query */\n  fetch() {\n    if (this.result) return this.result;\n    // add projection operator\n    if (isObject(this.projection)) {\n      this.operators.push({\n        $project: this.projection\n      });\n    }\n    // filter collection\n    this.result = Lazy(this.source).filter(this.predicate);\n    if (this.operators.length > 0) {\n      this.result = new Aggregator(this.operators, this.options).stream(this.result);\n    }\n    return this.result;\n  }\n  /** Returns an iterator with the buffered data included */\n  fetchAll() {\n    const buffered = Lazy([...this.buffer]);\n    this.buffer = [];\n    return compose(buffered, this.fetch());\n  }\n  /**\n   * Return remaining objects in the cursor as an array. This method exhausts the cursor\n   * @returns {Array}\n   */\n  all() {\n    return this.fetchAll().value();\n  }\n  /**\n   * Returns the number of objects return in the cursor. This method exhausts the cursor\n   * @returns {Number}\n   */\n  count() {\n    return this.all().length;\n  }\n  /**\n   * Returns a cursor that begins returning results only after passing or skipping a number of documents.\n   * @param {Number} n the number of results to skip.\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  skip(n) {\n    this.operators.push({\n      $skip: n\n    });\n    return this;\n  }\n  /**\n   * Constrains the size of a cursor's result set.\n   * @param {Number} n the number of results to limit to.\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  limit(n) {\n    this.operators.push({\n      $limit: n\n    });\n    return this;\n  }\n  /**\n   * Returns results ordered according to a sort specification.\n   * @param {Object} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  sort(modifier) {\n    this.operators.push({\n      $sort: modifier\n    });\n    return this;\n  }\n  /**\n   * Specifies the collation for the cursor returned by the `mingo.Query.find`\n   * @param {*} spec\n   */\n  collation(spec) {\n    this.options = Object.assign(Object.assign({}, this.options), {\n      collation: spec\n    });\n    return this;\n  }\n  /**\n   * Returns the next document in a cursor.\n   * @returns {Object | Boolean}\n   */\n  next() {\n    // yield value obtains in hasNext()\n    if (this.buffer.length > 0) {\n      return this.buffer.pop();\n    }\n    const o = this.fetch().next();\n    if (o.done) return;\n    return o.value;\n  }\n  /**\n   * Returns true if the cursor has documents and can be iterated.\n   * @returns {boolean}\n   */\n  hasNext() {\n    // there is a value in the buffer\n    if (this.buffer.length > 0) return true;\n    const o = this.fetch().next();\n    if (o.done) return false;\n    this.buffer.push(o.value);\n    return true;\n  }\n  /**\n   * Applies a function to each document in a cursor and collects the return values in an array.\n   * @param fn\n   * @returns {Array}\n   */\n  map(fn) {\n    return this.all().map(fn);\n  }\n  /**\n   * Applies a JavaScript function for every document in a cursor.\n   * @param fn\n   */\n  forEach(fn) {\n    this.all().forEach(fn);\n  }\n  [Symbol.iterator]() {\n    return this.fetchAll();\n  }\n}","map":{"version":3,"names":["Aggregator","compose","Lazy","isObject","Cursor","constructor","source","predicate","projection","options","operators","result","buffer","fetch","push","$project","filter","length","stream","fetchAll","buffered","all","value","count","skip","n","$skip","limit","$limit","sort","modifier","$sort","collation","spec","Object","assign","next","pop","o","done","hasNext","map","fn","forEach","Symbol","iterator"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/cursor.js"],"sourcesContent":["import { Aggregator } from \"./aggregator\";\nimport { compose, Lazy } from \"./lazy\";\nimport { isObject } from \"./util\";\n/**\n * Cursor to iterate and perform filtering on matched objects.\n * This object must not be used directly. A cursor may be obtaine from calling `find()` on an instance of `Query`.\n *\n * @param collection The input source of the collection\n * @param predicate A predicate function to test documents\n * @param projection A projection criteria\n * @param options Options\n * @constructor\n */\nexport class Cursor {\n    constructor(source, predicate, projection, options) {\n        this.source = source;\n        this.predicate = predicate;\n        this.projection = projection;\n        this.options = options;\n        this.operators = [];\n        this.result = null;\n        this.buffer = [];\n    }\n    /** Returns the iterator from running the query */\n    fetch() {\n        if (this.result)\n            return this.result;\n        // add projection operator\n        if (isObject(this.projection)) {\n            this.operators.push({ $project: this.projection });\n        }\n        // filter collection\n        this.result = Lazy(this.source).filter(this.predicate);\n        if (this.operators.length > 0) {\n            this.result = new Aggregator(this.operators, this.options).stream(this.result);\n        }\n        return this.result;\n    }\n    /** Returns an iterator with the buffered data included */\n    fetchAll() {\n        const buffered = Lazy([...this.buffer]);\n        this.buffer = [];\n        return compose(buffered, this.fetch());\n    }\n    /**\n     * Return remaining objects in the cursor as an array. This method exhausts the cursor\n     * @returns {Array}\n     */\n    all() {\n        return this.fetchAll().value();\n    }\n    /**\n     * Returns the number of objects return in the cursor. This method exhausts the cursor\n     * @returns {Number}\n     */\n    count() {\n        return this.all().length;\n    }\n    /**\n     * Returns a cursor that begins returning results only after passing or skipping a number of documents.\n     * @param {Number} n the number of results to skip.\n     * @return {Cursor} Returns the cursor, so you can chain this call.\n     */\n    skip(n) {\n        this.operators.push({ $skip: n });\n        return this;\n    }\n    /**\n     * Constrains the size of a cursor's result set.\n     * @param {Number} n the number of results to limit to.\n     * @return {Cursor} Returns the cursor, so you can chain this call.\n     */\n    limit(n) {\n        this.operators.push({ $limit: n });\n        return this;\n    }\n    /**\n     * Returns results ordered according to a sort specification.\n     * @param {Object} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending\n     * @return {Cursor} Returns the cursor, so you can chain this call.\n     */\n    sort(modifier) {\n        this.operators.push({ $sort: modifier });\n        return this;\n    }\n    /**\n     * Specifies the collation for the cursor returned by the `mingo.Query.find`\n     * @param {*} spec\n     */\n    collation(spec) {\n        this.options = Object.assign(Object.assign({}, this.options), { collation: spec });\n        return this;\n    }\n    /**\n     * Returns the next document in a cursor.\n     * @returns {Object | Boolean}\n     */\n    next() {\n        // yield value obtains in hasNext()\n        if (this.buffer.length > 0) {\n            return this.buffer.pop();\n        }\n        const o = this.fetch().next();\n        if (o.done)\n            return;\n        return o.value;\n    }\n    /**\n     * Returns true if the cursor has documents and can be iterated.\n     * @returns {boolean}\n     */\n    hasNext() {\n        // there is a value in the buffer\n        if (this.buffer.length > 0)\n            return true;\n        const o = this.fetch().next();\n        if (o.done)\n            return false;\n        this.buffer.push(o.value);\n        return true;\n    }\n    /**\n     * Applies a function to each document in a cursor and collects the return values in an array.\n     * @param fn\n     * @returns {Array}\n     */\n    map(fn) {\n        return this.all().map(fn);\n    }\n    /**\n     * Applies a JavaScript function for every document in a cursor.\n     * @param fn\n     */\n    forEach(fn) {\n        this.all().forEach(fn);\n    }\n    [Symbol.iterator]() {\n        return this.fetchAll();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}