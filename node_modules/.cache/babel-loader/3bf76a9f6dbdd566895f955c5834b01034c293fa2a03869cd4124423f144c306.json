{"ast":null,"code":"// Custom Aggregation Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#custom-aggregation-expression-operators\nimport { ComputeOptions, computeValue } from \"../../core\";\nimport { assert } from \"../../util\";\n/**\n * Defines a custom accumulator function.\n *\n * @param {Array} collection The input array\n * @param {*} expr The expression for the operator\n * @param {Options} options Options\n */\nexport const $accumulator = (collection, expr, options) => {\n  var _a;\n  assert(!!options && options.scriptEnabled, \"$accumulator operator requires 'scriptEnabled' option to be true\");\n  if (collection.length == 0) return expr.initArgs;\n  const copts = ComputeOptions.init(options);\n  const initArgs = computeValue({}, expr.initArgs || [], null, copts.update(((_a = copts === null || copts === void 0 ? void 0 : copts.local) === null || _a === void 0 ? void 0 : _a.groupId) || {}));\n  let state = expr.init.call(null, ...initArgs);\n  for (const doc of collection) {\n    // get arguments for document\n    const args = computeValue(doc, expr.accumulateArgs, null, copts.update(doc));\n    // update the state with each documents value\n    // eslint-disable-next-line\n    state = expr.accumulate.call(null, ...[state, ...args]);\n  }\n  return expr.finalize ? expr.finalize.call(null, state) : state;\n};","map":{"version":3,"names":["ComputeOptions","computeValue","assert","$accumulator","collection","expr","options","_a","scriptEnabled","length","initArgs","copts","init","update","local","groupId","state","call","doc","args","accumulateArgs","accumulate","finalize"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/accumulator/accumulator.js"],"sourcesContent":["// Custom Aggregation Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#custom-aggregation-expression-operators\nimport { ComputeOptions, computeValue } from \"../../core\";\nimport { assert } from \"../../util\";\n/**\n * Defines a custom accumulator function.\n *\n * @param {Array} collection The input array\n * @param {*} expr The expression for the operator\n * @param {Options} options Options\n */\nexport const $accumulator = (collection, expr, options) => {\n    var _a;\n    assert(!!options && options.scriptEnabled, \"$accumulator operator requires 'scriptEnabled' option to be true\");\n    if (collection.length == 0)\n        return expr.initArgs;\n    const copts = ComputeOptions.init(options);\n    const initArgs = computeValue({}, expr.initArgs || [], null, copts.update(((_a = copts === null || copts === void 0 ? void 0 : copts.local) === null || _a === void 0 ? void 0 : _a.groupId) || {}));\n    let state = expr.init.call(null, ...initArgs);\n    for (const doc of collection) {\n        // get arguments for document\n        const args = computeValue(doc, expr.accumulateArgs, null, copts.update(doc));\n        // update the state with each documents value\n        // eslint-disable-next-line\n        state = expr.accumulate.call(null, ...[state, ...args]);\n    }\n    return (expr.finalize ? expr.finalize.call(null, state) : state);\n};\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,YAAY,QAAQ,YAAY;AACzD,SAASC,MAAM,QAAQ,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,UAAU,EAAEC,IAAI,EAAEC,OAAO,KAAK;EACvD,IAAIC,EAAE;EACNL,MAAM,CAAC,CAAC,CAACI,OAAO,IAAIA,OAAO,CAACE,aAAa,EAAE,kEAAkE,CAAC;EAC9G,IAAIJ,UAAU,CAACK,MAAM,IAAI,CAAC,EACtB,OAAOJ,IAAI,CAACK,QAAQ;EACxB,MAAMC,KAAK,GAAGX,cAAc,CAACY,IAAI,CAACN,OAAO,CAAC;EAC1C,MAAMI,QAAQ,GAAGT,YAAY,CAAC,CAAC,CAAC,EAAEI,IAAI,CAACK,QAAQ,IAAI,EAAE,EAAE,IAAI,EAAEC,KAAK,CAACE,MAAM,CAAC,CAAC,CAACN,EAAE,GAAGI,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACG,KAAK,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACQ,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;EACpM,IAAIC,KAAK,GAAGX,IAAI,CAACO,IAAI,CAACK,IAAI,CAAC,IAAI,EAAE,GAAGP,QAAQ,CAAC;EAC7C,KAAK,MAAMQ,GAAG,IAAId,UAAU,EAAE;IAC1B;IACA,MAAMe,IAAI,GAAGlB,YAAY,CAACiB,GAAG,EAAEb,IAAI,CAACe,cAAc,EAAE,IAAI,EAAET,KAAK,CAACE,MAAM,CAACK,GAAG,CAAC,CAAC;IAC5E;IACA;IACAF,KAAK,GAAGX,IAAI,CAACgB,UAAU,CAACJ,IAAI,CAAC,IAAI,EAAE,GAAG,CAACD,KAAK,EAAE,GAAGG,IAAI,CAAC,CAAC;EAC3D;EACA,OAAQd,IAAI,CAACiB,QAAQ,GAAGjB,IAAI,CAACiB,QAAQ,CAACL,IAAI,CAAC,IAAI,EAAED,KAAK,CAAC,GAAGA,KAAK;AACnE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}