{"ast":null,"code":"import { getOperator, initOptions, OperatorType, ProcessingMode } from \"./core\";\nimport { Lazy } from \"./lazy\";\nimport { assert, cloneDeep, intersection, isEmpty } from \"./util\";\n/**\n * Provides functionality for the mongoDB aggregation pipeline\n *\n * @param pipeline an Array of pipeline operators\n * @param options An optional Options to pass the aggregator\n * @constructor\n */\nexport class Aggregator {\n  constructor(pipeline, options) {\n    this.pipeline = pipeline;\n    this.options = initOptions(options);\n  }\n  /**\n   * Returns an `Lazy` iterator for processing results of pipeline\n   *\n   * @param {*} collection An array or iterator object\n   * @returns {Iterator} an iterator object\n   */\n  stream(collection) {\n    let iterator = Lazy(collection);\n    const mode = this.options.processingMode;\n    if (mode == ProcessingMode.CLONE_ALL || mode == ProcessingMode.CLONE_INPUT) {\n      iterator.map(cloneDeep);\n    }\n    const pipelineOperators = new Array();\n    if (!isEmpty(this.pipeline)) {\n      // run aggregation pipeline\n      for (const operator of this.pipeline) {\n        const operatorKeys = Object.keys(operator);\n        const opName = operatorKeys[0];\n        const call = getOperator(OperatorType.PIPELINE, opName, this.options);\n        assert(operatorKeys.length === 1 && !!call, `invalid pipeline operator ${opName}`);\n        pipelineOperators.push(opName);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        iterator = call(iterator, operator[opName], this.options);\n      }\n    }\n    // operators that may share object graphs of inputs.\n    // we only need to clone the output for these since the objects will already be distinct for other operators.\n    if (mode == ProcessingMode.CLONE_OUTPUT || mode == ProcessingMode.CLONE_ALL && !!intersection([[\"$group\", \"$unwind\"], pipelineOperators]).length) {\n      iterator.map(cloneDeep);\n    }\n    return iterator;\n  }\n  /**\n   * Return the results of the aggregation as an array.\n   *\n   * @param {*} collection\n   * @param {*} query\n   */\n  run(collection) {\n    return this.stream(collection).value();\n  }\n}","map":{"version":3,"names":["getOperator","initOptions","OperatorType","ProcessingMode","Lazy","assert","cloneDeep","intersection","isEmpty","Aggregator","constructor","pipeline","options","stream","collection","iterator","mode","processingMode","CLONE_ALL","CLONE_INPUT","map","pipelineOperators","Array","operator","operatorKeys","Object","keys","opName","call","PIPELINE","length","push","CLONE_OUTPUT","run","value"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/aggregator.js"],"sourcesContent":["import { getOperator, initOptions, OperatorType, ProcessingMode } from \"./core\";\nimport { Lazy } from \"./lazy\";\nimport { assert, cloneDeep, intersection, isEmpty } from \"./util\";\n/**\n * Provides functionality for the mongoDB aggregation pipeline\n *\n * @param pipeline an Array of pipeline operators\n * @param options An optional Options to pass the aggregator\n * @constructor\n */\nexport class Aggregator {\n    constructor(pipeline, options) {\n        this.pipeline = pipeline;\n        this.options = initOptions(options);\n    }\n    /**\n     * Returns an `Lazy` iterator for processing results of pipeline\n     *\n     * @param {*} collection An array or iterator object\n     * @returns {Iterator} an iterator object\n     */\n    stream(collection) {\n        let iterator = Lazy(collection);\n        const mode = this.options.processingMode;\n        if (mode == ProcessingMode.CLONE_ALL ||\n            mode == ProcessingMode.CLONE_INPUT) {\n            iterator.map(cloneDeep);\n        }\n        const pipelineOperators = new Array();\n        if (!isEmpty(this.pipeline)) {\n            // run aggregation pipeline\n            for (const operator of this.pipeline) {\n                const operatorKeys = Object.keys(operator);\n                const opName = operatorKeys[0];\n                const call = getOperator(OperatorType.PIPELINE, opName, this.options);\n                assert(operatorKeys.length === 1 && !!call, `invalid pipeline operator ${opName}`);\n                pipelineOperators.push(opName);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                iterator = call(iterator, operator[opName], this.options);\n            }\n        }\n        // operators that may share object graphs of inputs.\n        // we only need to clone the output for these since the objects will already be distinct for other operators.\n        if (mode == ProcessingMode.CLONE_OUTPUT ||\n            (mode == ProcessingMode.CLONE_ALL &&\n                !!intersection([[\"$group\", \"$unwind\"], pipelineOperators]).length)) {\n            iterator.map(cloneDeep);\n        }\n        return iterator;\n    }\n    /**\n     * Return the results of the aggregation as an array.\n     *\n     * @param {*} collection\n     * @param {*} query\n     */\n    run(collection) {\n        return this.stream(collection).value();\n    }\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,EAAEC,YAAY,EAAEC,cAAc,QAAQ,QAAQ;AAC/E,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,MAAM,EAAEC,SAAS,EAAEC,YAAY,EAAEC,OAAO,QAAQ,QAAQ;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,CAAC;EACpBC,WAAWA,CAACC,QAAQ,EAAEC,OAAO,EAAE;IAC3B,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGX,WAAW,CAACW,OAAO,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAACC,UAAU,EAAE;IACf,IAAIC,QAAQ,GAAGX,IAAI,CAACU,UAAU,CAAC;IAC/B,MAAME,IAAI,GAAG,IAAI,CAACJ,OAAO,CAACK,cAAc;IACxC,IAAID,IAAI,IAAIb,cAAc,CAACe,SAAS,IAChCF,IAAI,IAAIb,cAAc,CAACgB,WAAW,EAAE;MACpCJ,QAAQ,CAACK,GAAG,CAACd,SAAS,CAAC;IAC3B;IACA,MAAMe,iBAAiB,GAAG,IAAIC,KAAK,CAAC,CAAC;IACrC,IAAI,CAACd,OAAO,CAAC,IAAI,CAACG,QAAQ,CAAC,EAAE;MACzB;MACA,KAAK,MAAMY,QAAQ,IAAI,IAAI,CAACZ,QAAQ,EAAE;QAClC,MAAMa,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC;QAC1C,MAAMI,MAAM,GAAGH,YAAY,CAAC,CAAC,CAAC;QAC9B,MAAMI,IAAI,GAAG5B,WAAW,CAACE,YAAY,CAAC2B,QAAQ,EAAEF,MAAM,EAAE,IAAI,CAACf,OAAO,CAAC;QACrEP,MAAM,CAACmB,YAAY,CAACM,MAAM,KAAK,CAAC,IAAI,CAAC,CAACF,IAAI,EAAE,6BAA6BD,MAAM,EAAE,CAAC;QAClFN,iBAAiB,CAACU,IAAI,CAACJ,MAAM,CAAC;QAC9B;QACAZ,QAAQ,GAAGa,IAAI,CAACb,QAAQ,EAAEQ,QAAQ,CAACI,MAAM,CAAC,EAAE,IAAI,CAACf,OAAO,CAAC;MAC7D;IACJ;IACA;IACA;IACA,IAAII,IAAI,IAAIb,cAAc,CAAC6B,YAAY,IAClChB,IAAI,IAAIb,cAAc,CAACe,SAAS,IAC7B,CAAC,CAACX,YAAY,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAEc,iBAAiB,CAAC,CAAC,CAACS,MAAO,EAAE;MACxEf,QAAQ,CAACK,GAAG,CAACd,SAAS,CAAC;IAC3B;IACA,OAAOS,QAAQ;EACnB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIkB,GAAGA,CAACnB,UAAU,EAAE;IACZ,OAAO,IAAI,CAACD,MAAM,CAACC,UAAU,CAAC,CAACoB,KAAK,CAAC,CAAC;EAC1C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}