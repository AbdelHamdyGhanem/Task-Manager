{"ast":null,"code":"// Object Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#object-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { assert, isObject } from \"../../../util\";\n/**\n * Converts a document to an array of documents representing key-value pairs.\n *\n * @param {*} obj The target object for this expression\n * @param {*} expr The right-hand side of the operator\n * @param {Options} options Options to use for operation\n */\nexport const $objectToArray = (obj, expr, options) => {\n  const val = computeValue(obj, expr, null, options);\n  assert(isObject(val), \"$objectToArray expression must resolve to an object\");\n  const entries = Object.entries(val);\n  const result = new Array(entries.length);\n  let i = 0;\n  for (const [k, v] of entries) {\n    result[i++] = {\n      k,\n      v\n    };\n  }\n  return result;\n};","map":{"version":3,"names":["computeValue","assert","isObject","$objectToArray","obj","expr","options","val","entries","Object","result","Array","length","i","k","v"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/object/objectToArray.js"],"sourcesContent":["// Object Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#object-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { assert, isObject } from \"../../../util\";\n/**\n * Converts a document to an array of documents representing key-value pairs.\n *\n * @param {*} obj The target object for this expression\n * @param {*} expr The right-hand side of the operator\n * @param {Options} options Options to use for operation\n */\nexport const $objectToArray = (obj, expr, options) => {\n    const val = computeValue(obj, expr, null, options);\n    assert(isObject(val), \"$objectToArray expression must resolve to an object\");\n    const entries = Object.entries(val);\n    const result = new Array(entries.length);\n    let i = 0;\n    for (const [k, v] of entries) {\n        result[i++] = { k, v };\n    }\n    return result;\n};\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,QAAQ,QAAQ,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAClD,MAAMC,GAAG,GAAGP,YAAY,CAACI,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EAClDL,MAAM,CAACC,QAAQ,CAACK,GAAG,CAAC,EAAE,qDAAqD,CAAC;EAC5E,MAAMC,OAAO,GAAGC,MAAM,CAACD,OAAO,CAACD,GAAG,CAAC;EACnC,MAAMG,MAAM,GAAG,IAAIC,KAAK,CAACH,OAAO,CAACI,MAAM,CAAC;EACxC,IAAIC,CAAC,GAAG,CAAC;EACT,KAAK,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,IAAIP,OAAO,EAAE;IAC1BE,MAAM,CAACG,CAAC,EAAE,CAAC,GAAG;MAAEC,CAAC;MAAEC;IAAE,CAAC;EAC1B;EACA,OAAOL,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}