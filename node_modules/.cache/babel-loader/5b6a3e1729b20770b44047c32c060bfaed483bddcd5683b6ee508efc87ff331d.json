{"ast":null,"code":"import { Lazy } from \"../../lazy\";\nimport { assert, isString } from \"../../util\";\n/**\n * Returns a document that contains a count of the number of documents input to the stage.\n *\n * @param {Array} collection\n * @param {String} expr\n * @param {Options} options\n * @return {Object}\n */\nexport const $count = (collection, expr, _) => {\n  assert(isString(expr) && expr.trim() !== \"\" && expr.indexOf(\".\") === -1 && expr.trim()[0] !== \"$\", \"Invalid expression value for $count\");\n  return Lazy([{\n    [expr]: collection.size()\n  }]);\n};","map":{"version":3,"names":["Lazy","assert","isString","$count","collection","expr","_","trim","indexOf","size"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/pipeline/count.js"],"sourcesContent":["import { Lazy } from \"../../lazy\";\nimport { assert, isString } from \"../../util\";\n/**\n * Returns a document that contains a count of the number of documents input to the stage.\n *\n * @param {Array} collection\n * @param {String} expr\n * @param {Options} options\n * @return {Object}\n */\nexport const $count = (collection, expr, _) => {\n    assert(isString(expr) &&\n        expr.trim() !== \"\" &&\n        expr.indexOf(\".\") === -1 &&\n        expr.trim()[0] !== \"$\", \"Invalid expression value for $count\");\n    return Lazy([\n        {\n            [expr]: collection.size()\n        }\n    ]);\n};\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,YAAY;AACjC,SAASC,MAAM,EAAEC,QAAQ,QAAQ,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAACC,UAAU,EAAEC,IAAI,EAAEC,CAAC,KAAK;EAC3CL,MAAM,CAACC,QAAQ,CAACG,IAAI,CAAC,IACjBA,IAAI,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,IAClBF,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IACxBH,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,qCAAqC,CAAC;EAClE,OAAOP,IAAI,CAAC,CACR;IACI,CAACK,IAAI,GAAGD,UAAU,CAACK,IAAI,CAAC;EAC5B,CAAC,CACJ,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}