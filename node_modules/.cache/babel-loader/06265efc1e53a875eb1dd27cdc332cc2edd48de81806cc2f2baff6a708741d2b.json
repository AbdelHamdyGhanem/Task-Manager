{"ast":null,"code":"// https://www.mongodb.com/docs/manual/reference/operator/aggregation/maxN\nimport { ComputeOptions, computeValue } from \"../../core\";\nimport { compare, isNil } from \"../../util\";\nimport { $push } from \"./push\";\n/**\n * Returns an aggregation of the maxmimum value n elements within a group.\n * If the group contains fewer than n elements, $maxN returns all elements in the group.\n *\n * @param {Array} collection The input array\n * @param {Object} expr The right-hand side expression value of the operator\n * @param {Options} options The options to use for this operation\n * @returns {*}\n */\nexport const $maxN = (collection, expr, options) => {\n  var _a;\n  const copts = ComputeOptions.init(options);\n  const m = collection.length;\n  const n = computeValue((_a = copts === null || copts === void 0 ? void 0 : copts.local) === null || _a === void 0 ? void 0 : _a.groupId, expr.n, null, copts);\n  const arr = $push(collection, expr.input, options).filter(o => !isNil(o));\n  arr.sort((a, b) => -1 * compare(a, b));\n  return m <= n ? arr : arr.slice(0, n);\n};","map":{"version":3,"names":["ComputeOptions","computeValue","compare","isNil","$push","$maxN","collection","expr","options","_a","copts","init","m","length","n","local","groupId","arr","input","filter","o","sort","a","b","slice"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/accumulator/maxN.js"],"sourcesContent":["// https://www.mongodb.com/docs/manual/reference/operator/aggregation/maxN\nimport { ComputeOptions, computeValue } from \"../../core\";\nimport { compare, isNil } from \"../../util\";\nimport { $push } from \"./push\";\n/**\n * Returns an aggregation of the maxmimum value n elements within a group.\n * If the group contains fewer than n elements, $maxN returns all elements in the group.\n *\n * @param {Array} collection The input array\n * @param {Object} expr The right-hand side expression value of the operator\n * @param {Options} options The options to use for this operation\n * @returns {*}\n */\nexport const $maxN = (collection, expr, options) => {\n    var _a;\n    const copts = ComputeOptions.init(options);\n    const m = collection.length;\n    const n = computeValue((_a = copts === null || copts === void 0 ? void 0 : copts.local) === null || _a === void 0 ? void 0 : _a.groupId, expr.n, null, copts);\n    const arr = $push(collection, expr.input, options).filter(o => !isNil(o));\n    arr.sort((a, b) => -1 * compare(a, b));\n    return m <= n ? arr : arr.slice(0, n);\n};\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,YAAY,QAAQ,YAAY;AACzD,SAASC,OAAO,EAAEC,KAAK,QAAQ,YAAY;AAC3C,SAASC,KAAK,QAAQ,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGA,CAACC,UAAU,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAChD,IAAIC,EAAE;EACN,MAAMC,KAAK,GAAGV,cAAc,CAACW,IAAI,CAACH,OAAO,CAAC;EAC1C,MAAMI,CAAC,GAAGN,UAAU,CAACO,MAAM;EAC3B,MAAMC,CAAC,GAAGb,YAAY,CAAC,CAACQ,EAAE,GAAGC,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACK,KAAK,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACO,OAAO,EAAET,IAAI,CAACO,CAAC,EAAE,IAAI,EAAEJ,KAAK,CAAC;EAC7J,MAAMO,GAAG,GAAGb,KAAK,CAACE,UAAU,EAAEC,IAAI,CAACW,KAAK,EAAEV,OAAO,CAAC,CAACW,MAAM,CAACC,CAAC,IAAI,CAACjB,KAAK,CAACiB,CAAC,CAAC,CAAC;EACzEH,GAAG,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,CAAC,CAAC,GAAGrB,OAAO,CAACoB,CAAC,EAAEC,CAAC,CAAC,CAAC;EACtC,OAAOX,CAAC,IAAIE,CAAC,GAAGG,GAAG,GAAGA,GAAG,CAACO,KAAK,CAAC,CAAC,EAAEV,CAAC,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}