{"ast":null,"code":"import { Parents } from './parents.js';\nimport { AbstractNode } from './abstract-node.js';\nimport { oppositeBoolean } from './util.js';\nexport class LeafNode extends AbstractNode {\n  value;\n  parents = new Parents(this);\n  constructor(level, rootNode, value, parent) {\n    super(level, rootNode, 'LeafNode');\n    this.value = value;\n    this.parents.add(parent);\n  }\n  removeIfValueEquals(value) {\n    this.ensureNotDeleted();\n    if (this.value !== value) {\n      return false;\n    }\n    const parents = this.parents.getAll();\n    parents.forEach(parent => {\n      const branchKey = parent.branches.getKeyOfNode(this);\n      const otherBranch = parent.branches.getBranch(oppositeBoolean(branchKey));\n      this.parents.remove(parent);\n      parent.branches.setBranch(branchKey, otherBranch);\n      if (parent.isInternalNode()) {\n        parent.applyReductionRule();\n      }\n    });\n    return true;\n  }\n}","map":{"version":3,"names":["Parents","AbstractNode","oppositeBoolean","LeafNode","value","parents","constructor","level","rootNode","parent","add","removeIfValueEquals","ensureNotDeleted","getAll","forEach","branchKey","branches","getKeyOfNode","otherBranch","getBranch","remove","setBranch","isInternalNode","applyReductionRule"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/binary-decision-diagram/src/leaf-node.ts"],"sourcesContent":["import { Parents } from './parents.js';\nimport { AbstractNode } from './abstract-node.js';\nimport { RootNode } from './root-node.js';\nimport type { NonLeafNode } from './types.js';\nimport { oppositeBoolean } from './util.js';\nimport { InternalNode } from './internal-node.js';\n\nexport class LeafNode extends AbstractNode {\n    public parents = new Parents(this);\n\n    constructor(\n        level: number,\n        rootNode: RootNode,\n        public value: number,\n        parent: NonLeafNode\n    ) {\n        super(level, rootNode, 'LeafNode');\n        this.parents.add(parent);\n    }\n\n    removeIfValueEquals(value: number): boolean {\n        this.ensureNotDeleted();\n\n        if (this.value !== value) {\n            return false;\n        }\n\n        const parents = this.parents.getAll();\n        parents.forEach(parent => {\n            const branchKey = parent.branches.getKeyOfNode(this);\n            const otherBranch = parent.branches.getBranch(oppositeBoolean(branchKey));\n            this.parents.remove(parent);\n            parent.branches.setBranch(branchKey, otherBranch);\n            if (parent.isInternalNode()) {\n                (parent as InternalNode).applyReductionRule();\n            }\n        });\n\n        return true;\n    }\n\n\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,YAAY,QAAQ,oBAAoB;AAGjD,SAASC,eAAe,QAAQ,WAAW;AAG3C,OAAM,MAAOC,QAAS,SAAQF,YAAY;EAM3BG,KAAA;EALJC,OAAO,GAAG,IAAIL,OAAO,CAAC,IAAI,CAAC;EAElCM,YACIC,KAAa,EACbC,QAAkB,EACXJ,KAAa,EACpBK,MAAmB;IAEnB,KAAK,CAACF,KAAK,EAAEC,QAAQ,EAAE,UAAU,CAAC;IAH3B,KAAAJ,KAAK,GAALA,KAAK;IAIZ,IAAI,CAACC,OAAO,CAACK,GAAG,CAACD,MAAM,CAAC;EAC5B;EAEAE,mBAAmBA,CAACP,KAAa;IAC7B,IAAI,CAACQ,gBAAgB,EAAE;IAEvB,IAAI,IAAI,CAACR,KAAK,KAAKA,KAAK,EAAE;MACtB,OAAO,KAAK;IAChB;IAEA,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO,CAACQ,MAAM,EAAE;IACrCR,OAAO,CAACS,OAAO,CAACL,MAAM,IAAG;MACrB,MAAMM,SAAS,GAAGN,MAAM,CAACO,QAAQ,CAACC,YAAY,CAAC,IAAI,CAAC;MACpD,MAAMC,WAAW,GAAGT,MAAM,CAACO,QAAQ,CAACG,SAAS,CAACjB,eAAe,CAACa,SAAS,CAAC,CAAC;MACzE,IAAI,CAACV,OAAO,CAACe,MAAM,CAACX,MAAM,CAAC;MAC3BA,MAAM,CAACO,QAAQ,CAACK,SAAS,CAACN,SAAS,EAAEG,WAAW,CAAC;MACjD,IAAIT,MAAM,CAACa,cAAc,EAAE,EAAE;QACxBb,MAAuB,CAACc,kBAAkB,EAAE;MACjD;IACJ,CAAC,CAAC;IAEF,OAAO,IAAI;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}