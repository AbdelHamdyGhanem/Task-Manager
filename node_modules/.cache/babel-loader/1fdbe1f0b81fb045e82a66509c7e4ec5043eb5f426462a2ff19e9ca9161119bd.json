{"ast":null,"code":"import { RootNode } from './root-node.js';\nimport { lastChar } from './util.js';\nimport { InternalNode } from './internal-node.js';\nimport { LeafNode } from './leaf-node.js';\nexport function createBddFromTruthTable(truthTable) {\n  const root = new RootNode();\n  const firstKey = truthTable.keys().next().value;\n  const keyLength = firstKey.length;\n  const mustBeSize = Math.pow(2, keyLength);\n  if (truthTable.size !== mustBeSize) {\n    throw new Error('truth table has missing entries');\n  }\n  for (const [stateSet, value] of truthTable) {\n    let lastNode = root;\n    // itterate over each char of the state\n    for (let i = 0; i < stateSet.length - 1; i++) {\n      const level = i + 1;\n      const state = stateSet.charAt(i);\n      // if node for this state-char not exists, add new one\n      if (!lastNode.branches.getBranch(state)) {\n        lastNode.branches.setBranch(state, new InternalNode(level, root, lastNode));\n      }\n      lastNode = lastNode.branches.getBranch(state);\n    }\n    // last node is leaf-node\n    const lastState = lastChar(stateSet);\n    if (lastNode.branches.getBranch(lastState)) {\n      throw new Error('leafNode already exists, this should not happen');\n    }\n    lastNode.branches.setBranch(lastState, new LeafNode(stateSet.length, root, value, lastNode));\n  }\n  return root;\n}","map":{"version":3,"names":["RootNode","lastChar","InternalNode","LeafNode","createBddFromTruthTable","truthTable","root","firstKey","keys","next","value","keyLength","length","mustBeSize","Math","pow","size","Error","stateSet","lastNode","i","level","state","charAt","branches","getBranch","setBranch","lastState"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/binary-decision-diagram/src/create-bdd-from-truth-table.ts"],"sourcesContent":["import { RootNode } from './root-node.js';\nimport { lastChar } from './util.js';\nimport { InternalNode } from './internal-node.js';\nimport { LeafNode } from './leaf-node.js';\nimport type { TruthTable, NonLeafNode, BooleanString } from './types.js';\n\nexport function createBddFromTruthTable(\n    truthTable: TruthTable\n): RootNode {\n    const root = new RootNode();\n\n    const firstKey = truthTable.keys().next().value;\n    const keyLength = firstKey.length;\n    const mustBeSize = Math.pow(2, keyLength);\n    if (truthTable.size !== mustBeSize) {\n        throw new Error('truth table has missing entries');\n    }\n\n\n    for (const [stateSet, value] of truthTable) {\n        let lastNode: NonLeafNode = root;\n\n        // itterate over each char of the state\n        for (let i = 0; i < (stateSet.length - 1); i++) {\n            const level = i + 1;\n            const state: BooleanString = stateSet.charAt(i) as BooleanString;\n\n            // if node for this state-char not exists, add new one\n            if (!lastNode.branches.getBranch(state)) {\n                lastNode.branches.setBranch(\n                    state,\n                    new InternalNode(\n                        level,\n                        root,\n                        lastNode,\n                    )\n                );\n            }\n            lastNode = lastNode.branches.getBranch(state) as NonLeafNode;\n        }\n\n        // last node is leaf-node\n        const lastState = lastChar(stateSet) as BooleanString;\n        if (lastNode.branches.getBranch(lastState)) {\n            throw new Error('leafNode already exists, this should not happen');\n        }\n        lastNode.branches.setBranch(\n            lastState,\n            new LeafNode(\n                stateSet.length,\n                root,\n                value,\n                lastNode,\n            )\n        );\n    }\n\n    return root;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,QAAQ,QAAQ,gBAAgB;AAGzC,OAAM,SAAUC,uBAAuBA,CACnCC,UAAsB;EAEtB,MAAMC,IAAI,GAAG,IAAIN,QAAQ,EAAE;EAE3B,MAAMO,QAAQ,GAAGF,UAAU,CAACG,IAAI,EAAE,CAACC,IAAI,EAAE,CAACC,KAAK;EAC/C,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,MAAM;EACjC,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,SAAS,CAAC;EACzC,IAAIN,UAAU,CAACW,IAAI,KAAKH,UAAU,EAAE;IAChC,MAAM,IAAII,KAAK,CAAC,iCAAiC,CAAC;EACtD;EAGA,KAAK,MAAM,CAACC,QAAQ,EAAER,KAAK,CAAC,IAAIL,UAAU,EAAE;IACxC,IAAIc,QAAQ,GAAgBb,IAAI;IAEhC;IACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAIF,QAAQ,CAACN,MAAM,GAAG,CAAE,EAAEQ,CAAC,EAAE,EAAE;MAC5C,MAAMC,KAAK,GAAGD,CAAC,GAAG,CAAC;MACnB,MAAME,KAAK,GAAkBJ,QAAQ,CAACK,MAAM,CAACH,CAAC,CAAkB;MAEhE;MACA,IAAI,CAACD,QAAQ,CAACK,QAAQ,CAACC,SAAS,CAACH,KAAK,CAAC,EAAE;QACrCH,QAAQ,CAACK,QAAQ,CAACE,SAAS,CACvBJ,KAAK,EACL,IAAIpB,YAAY,CACZmB,KAAK,EACLf,IAAI,EACJa,QAAQ,CACX,CACJ;MACL;MACAA,QAAQ,GAAGA,QAAQ,CAACK,QAAQ,CAACC,SAAS,CAACH,KAAK,CAAgB;IAChE;IAEA;IACA,MAAMK,SAAS,GAAG1B,QAAQ,CAACiB,QAAQ,CAAkB;IACrD,IAAIC,QAAQ,CAACK,QAAQ,CAACC,SAAS,CAACE,SAAS,CAAC,EAAE;MACxC,MAAM,IAAIV,KAAK,CAAC,iDAAiD,CAAC;IACtE;IACAE,QAAQ,CAACK,QAAQ,CAACE,SAAS,CACvBC,SAAS,EACT,IAAIxB,QAAQ,CACRe,QAAQ,CAACN,MAAM,EACfN,IAAI,EACJI,KAAK,EACLS,QAAQ,CACX,CACJ;EACL;EAEA,OAAOb,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}