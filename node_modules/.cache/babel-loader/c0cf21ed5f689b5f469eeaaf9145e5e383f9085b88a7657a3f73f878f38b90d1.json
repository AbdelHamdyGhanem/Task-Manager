{"ast":null,"code":"import { nextNodeId } from './util.js';\nimport { findSimilarNode } from './find-similar-node.js';\nexport class AbstractNode {\n  level;\n  id = nextNodeId();\n  deleted = false;\n  type;\n  rootNode;\n  constructor(level, rootNode, type) {\n    this.level = level;\n    this.type = type;\n    this.rootNode = rootNode;\n    if (rootNode) {\n      this.rootNode.addNode(this);\n    }\n  }\n  isEqualToOtherNode(otherNode,\n  // optimisation shortcut, is faster if own string already known\n  ownString = this.toString()) {\n    const ret = ownString === otherNode.toString();\n    return ret;\n  }\n  // deletes the whole node\n  remove() {\n    this.ensureNotDeleted('remove');\n    // console.log('AbstractNode().remove() node: ' + this.id);\n    // console.log(this.toJSON(true));\n    if (this.isInternalNode()) {\n      const useNode = this;\n      if (useNode.parents.size > 0) {\n        throw new Error('cannot remove node with parents ' + this.id);\n      }\n    }\n    if (this.branches) {\n      const useNode = this;\n      if (useNode.branches.areBranchesStrictEqual()) {\n        useNode.branches.getBranch('0').parents.remove(useNode);\n      } else {\n        useNode.branches.getBranch('0').parents.remove(useNode);\n        useNode.branches.getBranch('1').parents.remove(useNode);\n      }\n    }\n    this.deleted = true;\n    this.rootNode.removeNode(this);\n  }\n  toJSON(withId = false) {\n    const ret = {\n      id: withId ? this.id : undefined,\n      deleted: withId ? this.deleted : undefined,\n      type: this.type,\n      level: this.level\n    };\n    if (withId && this.parents) {\n      ret.parents = this.parents.toString();\n    }\n    if (this.isLeafNode()) {\n      ret.value = this.asLeafNode().value;\n    }\n    if (this.branches && !this.branches.deleted) {\n      const branches = this.branches;\n      ret.branches = {\n        '0': branches.getBranch('0').toJSON(withId),\n        '1': branches.getBranch('1').toJSON(withId)\n      };\n    }\n    return ret;\n  }\n  // a strange string-representation\n  // to make an equal check between nodes\n  toString() {\n    let ret = '' + '<' + this.type + ':' + this.level;\n    if (this.branches) {\n      const branches = this.branches;\n      ret += '|0:' + branches.getBranch('0');\n      ret += '|1:' + branches.getBranch('1');\n    }\n    if (this.isLeafNode()) {\n      ret += '|v:' + this.asLeafNode().value;\n    }\n    ret += '>';\n    return ret;\n  }\n  isRootNode() {\n    return this.type === 'RootNode';\n  }\n  isInternalNode() {\n    return this.type === 'InternalNode';\n  }\n  isLeafNode() {\n    return this.type === 'LeafNode';\n  }\n  asRootNode() {\n    if (!this.isRootNode()) {\n      throw new Error('ouch');\n    }\n    return this;\n  }\n  asInternalNode() {\n    if (!this.isInternalNode()) {\n      throw new Error('ouch');\n    }\n    return this;\n  }\n  asLeafNode() {\n    if (!this.isLeafNode()) {\n      throw new Error('ouch');\n    }\n    return this;\n  }\n  ensureNotDeleted(op = 'unknown') {\n    if (this.deleted) {\n      throw new Error('forbidden operation ' + op + ' on deleted node ' + this.id);\n    }\n  }\n  log() {\n    console.log(JSON.stringify(this.toJSON(true), null, 2));\n  }\n  /**\n  * by the elimination-rule of bdd,\n  * if two branches of the same level are equal,\n  * one can be removed\n  *\n  * See page 21 at:\n  * @link https://people.eecs.berkeley.edu/~sseshia/219c/lectures/BinaryDecisionDiagrams.pdf\n  */\n  applyEliminationRule(\n  // can be provided for better performance\n  nodesOfSameLevel) {\n    this.ensureNotDeleted('applyEliminationRule');\n    if (!nodesOfSameLevel) {\n      nodesOfSameLevel = this.rootNode.getNodesOfLevel(this.level);\n    }\n    const other = findSimilarNode(this, nodesOfSameLevel);\n    if (other) {\n      // console.log('applyEliminationRule() remove:' + this.id + '; other: ' + other.id);\n      // keep 'other', remove 'this'\n      // move own parents to other\n      const ownParents = this.parents.getAll();\n      const parentsWithStrictEqualBranches = [];\n      ownParents.forEach(parent => {\n        // console.log('ownParent: ' + parent.id);\n        const branchKey = parent.branches.getKeyOfNode(this);\n        // console.log('branchKey: ' + branchKey);\n        parent.branches.setBranch(branchKey, other);\n        if (parent.branches.areBranchesStrictEqual()) {\n          parentsWithStrictEqualBranches.push(parent);\n        }\n        // remove parents from own list\n        // this will auto-remove the connection to the other '1'-branch\n        this.parents.remove(parent);\n      });\n      // parents that now have equal branches, must be removed again\n      parentsWithStrictEqualBranches.forEach(node => {\n        if (node.isInternalNode()) {\n          // console.log('trigger applyReductionRule from applyEliminationRule');\n          node.applyReductionRule();\n        }\n      });\n      return true;\n    } else {\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["nextNodeId","findSimilarNode","AbstractNode","level","id","deleted","type","rootNode","constructor","addNode","isEqualToOtherNode","otherNode","ownString","toString","ret","remove","ensureNotDeleted","isInternalNode","useNode","parents","size","Error","branches","areBranchesStrictEqual","getBranch","removeNode","toJSON","withId","undefined","isLeafNode","value","asLeafNode","isRootNode","asRootNode","asInternalNode","op","log","console","JSON","stringify","applyEliminationRule","nodesOfSameLevel","getNodesOfLevel","other","ownParents","getAll","parentsWithStrictEqualBranches","forEach","parent","branchKey","getKeyOfNode","setBranch","push","node","applyReductionRule"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/binary-decision-diagram/src/abstract-node.ts"],"sourcesContent":["import { nextNodeId } from './util.js';\nimport type { NonRootNode, NonLeafNode, NodeType } from './types.js';\nimport { Branches } from './branches.js';\nimport { RootNode } from './root-node.js';\nimport { InternalNode } from './internal-node.js';\nimport { LeafNode } from './leaf-node.js';\nimport { findSimilarNode } from './find-similar-node.js';\n\nexport class AbstractNode {\n    readonly id: string = nextNodeId();\n    public deleted: boolean = false;\n    public type: NodeType;\n    public rootNode: RootNode;\n\n    constructor(\n        public level: number,\n        rootNode: RootNode | null,\n        type: NodeType\n    ) {\n        this.type = type;\n\n        this.rootNode = rootNode as RootNode;\n        if (rootNode) {\n            this.rootNode.addNode(this as any);\n        }\n    }\n\n    isEqualToOtherNode(\n        otherNode: NonRootNode | RootNode,\n        // optimisation shortcut, is faster if own string already known\n        ownString: string = this.toString()\n    ): boolean {\n        const ret = ownString === otherNode.toString();\n        return ret;\n    }\n\n    // deletes the whole node\n    public remove() {\n        this.ensureNotDeleted('remove');\n\n        // console.log('AbstractNode().remove() node: ' + this.id);\n        // console.log(this.toJSON(true));\n\n        if (this.isInternalNode()) {\n            const useNode: InternalNode = this as any;\n            if (useNode.parents.size > 0) {\n                throw new Error('cannot remove node with parents ' + this.id);\n            }\n        }\n\n        if ((this as any).branches) {\n            const useNode: NonLeafNode = this as any;\n            if (useNode.branches.areBranchesStrictEqual()) {\n                useNode.branches.getBranch('0').parents.remove(useNode);\n            } else {\n                useNode.branches.getBranch('0').parents.remove(useNode);\n                useNode.branches.getBranch('1').parents.remove(useNode);\n            }\n        }\n\n        this.deleted = true;\n        this.rootNode.removeNode(this as any);\n    }\n\n    toJSON(withId: boolean = false): any {\n        const ret: any = {\n            id: withId ? this.id : undefined,\n            deleted: withId ? this.deleted : undefined,\n            type: this.type,\n            level: this.level\n        };\n\n        if (withId && (this as any).parents) {\n            ret.parents = (this as any).parents.toString();\n        }\n        if (this.isLeafNode()) {\n            ret.value = this.asLeafNode().value;\n        }\n        if ((this as any).branches && !(this as any).branches.deleted) {\n            const branches: Branches = (this as any).branches;\n            ret.branches = {\n                '0': branches.getBranch('0').toJSON(withId),\n                '1': branches.getBranch('1').toJSON(withId)\n            };\n        }\n\n        return ret;\n    }\n\n\n    // a strange string-representation\n    // to make an equal check between nodes\n    toString(): string {\n        let ret = '' +\n            '<' +\n            this.type + ':' + this.level;\n\n        if ((this as any).branches) {\n            const branches: Branches = (this as any).branches;\n            ret += '|0:' + branches.getBranch('0');\n            ret += '|1:' + branches.getBranch('1');\n        }\n        if (this.isLeafNode()) {\n            ret += '|v:' + this.asLeafNode().value;\n        }\n        ret += '>';\n        return ret;\n    }\n\n\n    isRootNode(): boolean {\n        return this.type === 'RootNode';\n    }\n    isInternalNode(): boolean {\n        return this.type === 'InternalNode';\n    }\n    isLeafNode(): boolean {\n        return this.type === 'LeafNode';\n    }\n\n    asRootNode(): RootNode {\n        if (!this.isRootNode()) {\n            throw new Error('ouch');\n        }\n        return this as any;\n    }\n    asInternalNode(): InternalNode {\n        if (!this.isInternalNode()) {\n            throw new Error('ouch');\n        }\n        return this as any;\n    }\n    asLeafNode(): LeafNode {\n        if (!this.isLeafNode()) {\n            throw new Error('ouch');\n        }\n        return this as any;\n    }\n\n    ensureNotDeleted(op: string = 'unknown') {\n        if (this.deleted) {\n            throw new Error('forbidden operation ' + op + ' on deleted node ' + this.id);\n        }\n    }\n\n    public log() {\n        console.log(JSON.stringify(this.toJSON(true), null, 2));\n    }\n\n    /**\n * by the elimination-rule of bdd,\n * if two branches of the same level are equal,\n * one can be removed\n *\n * See page 21 at:\n * @link https://people.eecs.berkeley.edu/~sseshia/219c/lectures/BinaryDecisionDiagrams.pdf\n */\n    applyEliminationRule<T extends AbstractNode>(\n        // can be provided for better performance\n        nodesOfSameLevel?: T[]\n    ): boolean {\n        this.ensureNotDeleted('applyEliminationRule');\n        if (!nodesOfSameLevel) {\n            nodesOfSameLevel = this.rootNode.getNodesOfLevel(this.level) as any[];\n        }\n\n        const other = findSimilarNode(\n            this,\n            nodesOfSameLevel as any[]\n        );\n        if (other) {\n            // console.log('applyEliminationRule() remove:' + this.id + '; other: ' + other.id);\n\n            // keep 'other', remove 'this'\n\n            // move own parents to other\n            const ownParents = (this as any).parents.getAll();\n            const parentsWithStrictEqualBranches: NonLeafNode[] = [];\n            ownParents.forEach((parent: InternalNode) => {\n                // console.log('ownParent: ' + parent.id);\n                const branchKey = parent.branches.getKeyOfNode(this as any);\n                // console.log('branchKey: ' + branchKey);\n                parent.branches.setBranch(branchKey, other);\n\n                if (parent.branches.areBranchesStrictEqual()) {\n                    parentsWithStrictEqualBranches.push(parent);\n                }\n                // remove parents from own list\n                // this will auto-remove the connection to the other '1'-branch\n                (this as any).parents.remove(parent);\n            });\n\n            // parents that now have equal branches, must be removed again\n            parentsWithStrictEqualBranches.forEach(node => {\n                if (node.isInternalNode()) {\n                    // console.log('trigger applyReductionRule from applyEliminationRule');\n                    (node as InternalNode).applyReductionRule();\n                }\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}