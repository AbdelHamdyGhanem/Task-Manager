{"ast":null,"code":"// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { Query } from \"../../../query\";\nimport { assert, isArray } from \"../../../util\";\n/**\n * Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.\n *\n * @param selector\n * @param rhs\n * @returns {Function}\n */\nexport const $and = (_, rhs, options) => {\n  assert(isArray(rhs), \"Invalid expression: $and expects value to be an Array.\");\n  const queries = rhs.map(expr => new Query(expr, options));\n  return obj => queries.every(q => q.test(obj));\n};","map":{"version":3,"names":["Query","assert","isArray","$and","_","rhs","options","queries","map","expr","obj","every","q","test"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/query/logical/and.js"],"sourcesContent":["// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { Query } from \"../../../query\";\nimport { assert, isArray } from \"../../../util\";\n/**\n * Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.\n *\n * @param selector\n * @param rhs\n * @returns {Function}\n */\nexport const $and = (_, rhs, options) => {\n    assert(isArray(rhs), \"Invalid expression: $and expects value to be an Array.\");\n    const queries = rhs.map(expr => new Query(expr, options));\n    return (obj) => queries.every(q => q.test(obj));\n};\n"],"mappings":"AAAA;AACA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,SAASC,MAAM,EAAEC,OAAO,QAAQ,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAGA,CAACC,CAAC,EAAEC,GAAG,EAAEC,OAAO,KAAK;EACrCL,MAAM,CAACC,OAAO,CAACG,GAAG,CAAC,EAAE,wDAAwD,CAAC;EAC9E,MAAME,OAAO,GAAGF,GAAG,CAACG,GAAG,CAACC,IAAI,IAAI,IAAIT,KAAK,CAACS,IAAI,EAAEH,OAAO,CAAC,CAAC;EACzD,OAAQI,GAAG,IAAKH,OAAO,CAACI,KAAK,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC;AACnD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}