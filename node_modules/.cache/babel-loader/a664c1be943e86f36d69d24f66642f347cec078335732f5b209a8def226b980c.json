{"ast":null,"code":"/**\n * String Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#string-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber, isString } from \"../../../util\";\n/**\n * Searches a string for an occurrence of a substring and returns the UTF-8 code point index of the first occurence.\n * If the substring is not found, returns -1.\n *\n * @param  {Object} obj\n * @param  {*} expr\n * @return {*}\n */\nexport const $indexOfBytes = (obj, expr, options) => {\n  const arr = computeValue(obj, expr, null, options);\n  const errorMsg = \"$indexOfBytes expression resolves to invalid an argument\";\n  if (isNil(arr[0])) return null;\n  assert(isString(arr[0]) && isString(arr[1]), errorMsg);\n  const str = arr[0];\n  const searchStr = arr[1];\n  let start = arr[2];\n  let end = arr[3];\n  let valid = isNil(start) || isNumber(start) && start >= 0 && Math.round(start) === start;\n  valid = valid && (isNil(end) || isNumber(end) && end >= 0 && Math.round(end) === end);\n  assert(valid, errorMsg);\n  start = start || 0;\n  end = end || str.length;\n  if (start > end) return -1;\n  const index = str.substring(start, end).indexOf(searchStr);\n  return index > -1 ? index + start : index;\n};","map":{"version":3,"names":["computeValue","assert","isNil","isNumber","isString","$indexOfBytes","obj","expr","options","arr","errorMsg","str","searchStr","start","end","valid","Math","round","length","index","substring","indexOf"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/string/indexOfBytes.js"],"sourcesContent":["/**\n * String Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#string-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber, isString } from \"../../../util\";\n/**\n * Searches a string for an occurrence of a substring and returns the UTF-8 code point index of the first occurence.\n * If the substring is not found, returns -1.\n *\n * @param  {Object} obj\n * @param  {*} expr\n * @return {*}\n */\nexport const $indexOfBytes = (obj, expr, options) => {\n    const arr = computeValue(obj, expr, null, options);\n    const errorMsg = \"$indexOfBytes expression resolves to invalid an argument\";\n    if (isNil(arr[0]))\n        return null;\n    assert(isString(arr[0]) && isString(arr[1]), errorMsg);\n    const str = arr[0];\n    const searchStr = arr[1];\n    let start = arr[2];\n    let end = arr[3];\n    let valid = isNil(start) ||\n        (isNumber(start) && start >= 0 && Math.round(start) === start);\n    valid =\n        valid &&\n            (isNil(end) || (isNumber(end) && end >= 0 && Math.round(end) === end));\n    assert(valid, errorMsg);\n    start = start || 0;\n    end = end || str.length;\n    if (start > end)\n        return -1;\n    const index = str.substring(start, end).indexOf(searchStr);\n    return index > -1 ? index + start : index;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EACjD,MAAMC,GAAG,GAAGT,YAAY,CAACM,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EAClD,MAAME,QAAQ,GAAG,0DAA0D;EAC3E,IAAIR,KAAK,CAACO,GAAG,CAAC,CAAC,CAAC,CAAC,EACb,OAAO,IAAI;EACfR,MAAM,CAACG,QAAQ,CAACK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAIL,QAAQ,CAACK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEC,QAAQ,CAAC;EACtD,MAAMC,GAAG,GAAGF,GAAG,CAAC,CAAC,CAAC;EAClB,MAAMG,SAAS,GAAGH,GAAG,CAAC,CAAC,CAAC;EACxB,IAAII,KAAK,GAAGJ,GAAG,CAAC,CAAC,CAAC;EAClB,IAAIK,GAAG,GAAGL,GAAG,CAAC,CAAC,CAAC;EAChB,IAAIM,KAAK,GAAGb,KAAK,CAACW,KAAK,CAAC,IACnBV,QAAQ,CAACU,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,IAAIG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,KAAKA,KAAM;EAClEE,KAAK,GACDA,KAAK,KACAb,KAAK,CAACY,GAAG,CAAC,IAAKX,QAAQ,CAACW,GAAG,CAAC,IAAIA,GAAG,IAAI,CAAC,IAAIE,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC,KAAKA,GAAI,CAAC;EAC9Eb,MAAM,CAACc,KAAK,EAAEL,QAAQ,CAAC;EACvBG,KAAK,GAAGA,KAAK,IAAI,CAAC;EAClBC,GAAG,GAAGA,GAAG,IAAIH,GAAG,CAACO,MAAM;EACvB,IAAIL,KAAK,GAAGC,GAAG,EACX,OAAO,CAAC,CAAC;EACb,MAAMK,KAAK,GAAGR,GAAG,CAACS,SAAS,CAACP,KAAK,EAAEC,GAAG,CAAC,CAACO,OAAO,CAACT,SAAS,CAAC;EAC1D,OAAOO,KAAK,GAAG,CAAC,CAAC,GAAGA,KAAK,GAAGN,KAAK,GAAGM,KAAK;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}