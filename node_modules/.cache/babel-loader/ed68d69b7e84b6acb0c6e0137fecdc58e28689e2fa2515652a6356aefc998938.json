{"ast":null,"code":"// Miscellaneous Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/rand/#mongodb-expression-exp.-rand\nimport { computeValue } from \"../../../core\";\nimport { assert, isNil, isObject, isString } from \"../../../util\";\n/**\n * Adds, updates, or removes a specified field in a document.\n *\n * @param {*} obj The target object for this expression\n * @param {*} expr The right-hand side of the operator\n * @param {Options} options Options to use for operation\n */\nexport const $getField = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const [field, input] = isObject(args) ? [args.field, args.input || obj] : [args, obj];\n  if (isNil(input)) return null;\n  assert(isObject(input), \"$getField expression 'input' must evaluate to an object\");\n  assert(isString(field), \"$getField expression 'field' must evaluate to a string\");\n  return input[field];\n};","map":{"version":3,"names":["computeValue","assert","isNil","isObject","isString","$getField","obj","expr","options","args","field","input"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/misc/getField.js"],"sourcesContent":["// Miscellaneous Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/rand/#mongodb-expression-exp.-rand\nimport { computeValue } from \"../../../core\";\nimport { assert, isNil, isObject, isString } from \"../../../util\";\n/**\n * Adds, updates, or removes a specified field in a document.\n *\n * @param {*} obj The target object for this expression\n * @param {*} expr The right-hand side of the operator\n * @param {Options} options Options to use for operation\n */\nexport const $getField = (obj, expr, options) => {\n    const args = computeValue(obj, expr, null, options);\n    const [field, input] = isObject(args)\n        ? [args.field, args.input || obj]\n        : [args, obj];\n    if (isNil(input))\n        return null;\n    assert(isObject(input), \"$getField expression 'input' must evaluate to an object\");\n    assert(isString(field), \"$getField expression 'field' must evaluate to a string\");\n    return input[field];\n};\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC7C,MAAMC,IAAI,GAAGT,YAAY,CAACM,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EACnD,MAAM,CAACE,KAAK,EAAEC,KAAK,CAAC,GAAGR,QAAQ,CAACM,IAAI,CAAC,GAC/B,CAACA,IAAI,CAACC,KAAK,EAAED,IAAI,CAACE,KAAK,IAAIL,GAAG,CAAC,GAC/B,CAACG,IAAI,EAAEH,GAAG,CAAC;EACjB,IAAIJ,KAAK,CAACS,KAAK,CAAC,EACZ,OAAO,IAAI;EACfV,MAAM,CAACE,QAAQ,CAACQ,KAAK,CAAC,EAAE,yDAAyD,CAAC;EAClFV,MAAM,CAACG,QAAQ,CAACM,KAAK,CAAC,EAAE,wDAAwD,CAAC;EACjF,OAAOC,KAAK,CAACD,KAAK,CAAC;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}