{"ast":null,"code":"// https://www.mongodb.com/docs/manual/reference/operator/aggregation/topN/#mongodb-group-grp.-topN\nimport { Aggregator } from \"../../aggregator\";\nimport { ComputeOptions, computeValue } from \"../../core\";\nimport { $push } from \"./push\";\n/**\n * Returns an aggregation of the top n elements within a group, according to the specified sort order.\n * If the group contains fewer than n elements, $topN returns all elements in the group.\n *\n * @param {Array} collection The input array\n * @param {Object} expr The right-hand side expression value of the operator\n * @param {Options} options The options to use for this operation\n * @returns {*}\n */\nexport const $topN = (collection, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  const {\n    n,\n    sortBy\n  } = computeValue(copts.local.groupId, expr, null, copts);\n  const result = new Aggregator([{\n    $sort: sortBy\n  }, {\n    $limit: n\n  }], copts).run(collection);\n  return $push(result, expr.output, copts);\n};","map":{"version":3,"names":["Aggregator","ComputeOptions","computeValue","$push","$topN","collection","expr","options","copts","init","n","sortBy","local","groupId","result","$sort","$limit","run","output"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/accumulator/topN.js"],"sourcesContent":["// https://www.mongodb.com/docs/manual/reference/operator/aggregation/topN/#mongodb-group-grp.-topN\nimport { Aggregator } from \"../../aggregator\";\nimport { ComputeOptions, computeValue } from \"../../core\";\nimport { $push } from \"./push\";\n/**\n * Returns an aggregation of the top n elements within a group, according to the specified sort order.\n * If the group contains fewer than n elements, $topN returns all elements in the group.\n *\n * @param {Array} collection The input array\n * @param {Object} expr The right-hand side expression value of the operator\n * @param {Options} options The options to use for this operation\n * @returns {*}\n */\nexport const $topN = (collection, expr, options) => {\n    const copts = ComputeOptions.init(options);\n    const { n, sortBy } = computeValue(copts.local.groupId, expr, null, copts);\n    const result = new Aggregator([{ $sort: sortBy }, { $limit: n }], copts).run(collection);\n    return $push(result, expr.output, copts);\n};\n"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,cAAc,EAAEC,YAAY,QAAQ,YAAY;AACzD,SAASC,KAAK,QAAQ,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGA,CAACC,UAAU,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAChD,MAAMC,KAAK,GAAGP,cAAc,CAACQ,IAAI,CAACF,OAAO,CAAC;EAC1C,MAAM;IAAEG,CAAC;IAAEC;EAAO,CAAC,GAAGT,YAAY,CAACM,KAAK,CAACI,KAAK,CAACC,OAAO,EAAEP,IAAI,EAAE,IAAI,EAAEE,KAAK,CAAC;EAC1E,MAAMM,MAAM,GAAG,IAAId,UAAU,CAAC,CAAC;IAAEe,KAAK,EAAEJ;EAAO,CAAC,EAAE;IAAEK,MAAM,EAAEN;EAAE,CAAC,CAAC,EAAEF,KAAK,CAAC,CAACS,GAAG,CAACZ,UAAU,CAAC;EACxF,OAAOF,KAAK,CAACW,MAAM,EAAER,IAAI,CAACY,MAAM,EAAEV,KAAK,CAAC;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}