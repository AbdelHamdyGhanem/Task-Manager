{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport { mapDocumentsDataToCacheDocs } from \"./doc-cache.js\";\nimport { now, overwriteGetterForCaching } from \"./plugins/utils/index.js\";\n/**\n * RxDB needs the query results in multiple formats.\n * Sometimes as a Map or an array with only the documentData.\n * For better performance we work with this class\n * that initializes stuff lazily so that\n * we can directly work with the query results after RxQuery.exec()\n */\nexport var RxQuerySingleResult = /*#__PURE__*/function () {\n  /**\n   * Time at which the current _result state was created.\n   * Used to determine if the result set has changed since X\n   * so that we do not emit the same result multiple times on subscription.\n   */\n\n  function RxQuerySingleResult(collection,\n  // only used internally, do not use outside, use this.docsData instead\n  docsDataFromStorageInstance,\n  // can be overwritten for count-queries\n  count) {\n    this.time = now();\n    this.collection = collection;\n    this.count = count;\n    this.documents = mapDocumentsDataToCacheDocs(this.collection._docCache, docsDataFromStorageInstance);\n  }\n\n  /**\n   * Instead of using the newResultData in the result cache,\n   * we directly use the objects that are stored in the RxDocument\n   * to ensure we do not store the same data twice and fill up the memory.\n   * @overwrites itself with the actual value\n   */\n  return _createClass(RxQuerySingleResult, [{\n    key: \"docsData\",\n    get: function () {\n      return overwriteGetterForCaching(this, 'docsData', this.documents.map(d => d._data));\n    }\n\n    // A key->document map, used in the event reduce optimization.\n  }, {\n    key: \"docsDataMap\",\n    get: function () {\n      var map = new Map();\n      this.documents.forEach(d => {\n        map.set(d.primary, d._data);\n      });\n      return overwriteGetterForCaching(this, 'docsDataMap', map);\n    }\n  }, {\n    key: \"docsMap\",\n    get: function () {\n      var map = new Map();\n      var documents = this.documents;\n      for (var i = 0; i < documents.length; i++) {\n        var doc = documents[i];\n        map.set(doc.primary, doc);\n      }\n      return overwriteGetterForCaching(this, 'docsMap', map);\n    }\n  }]);\n}();","map":{"version":3,"names":["mapDocumentsDataToCacheDocs","now","overwriteGetterForCaching","RxQuerySingleResult","collection","docsDataFromStorageInstance","count","time","documents","_docCache","_createClass","key","get","map","d","_data","Map","forEach","set","primary","i","length","doc"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/rxdb/src/rx-query-single-result.ts"],"sourcesContent":["import { mapDocumentsDataToCacheDocs } from './doc-cache.ts';\nimport { now, overwriteGetterForCaching } from './plugins/utils/index.ts';\nimport type {\n    RxCollection,\n    RxDocument,\n    RxDocumentData\n} from './types';\n\n/**\n * RxDB needs the query results in multiple formats.\n * Sometimes as a Map or an array with only the documentData.\n * For better performance we work with this class\n * that initializes stuff lazily so that\n * we can directly work with the query results after RxQuery.exec()\n */\nexport class RxQuerySingleResult<RxDocType>{\n    /**\n     * Time at which the current _result state was created.\n     * Used to determine if the result set has changed since X\n     * so that we do not emit the same result multiple times on subscription.\n     */\n    public readonly time = now();\n    public readonly documents: RxDocument<RxDocType>[];\n    constructor(\n        public readonly collection: RxCollection<RxDocType>,\n        // only used internally, do not use outside, use this.docsData instead\n        docsDataFromStorageInstance: RxDocumentData<RxDocType>[],\n        // can be overwritten for count-queries\n        public readonly count: number,\n    ) {\n        this.documents = mapDocumentsDataToCacheDocs<RxDocType, any>(this.collection._docCache, docsDataFromStorageInstance);\n    }\n\n\n    /**\n     * Instead of using the newResultData in the result cache,\n     * we directly use the objects that are stored in the RxDocument\n     * to ensure we do not store the same data twice and fill up the memory.\n     * @overwrites itself with the actual value\n     */\n    get docsData(): RxDocumentData<RxDocType>[] {\n        return overwriteGetterForCaching(\n            this,\n            'docsData',\n            this.documents.map(d => d._data)\n        );\n    }\n\n\n    // A key->document map, used in the event reduce optimization.\n    get docsDataMap(): Map<string, RxDocumentData<RxDocType>> {\n        const map = new Map<string, RxDocumentData<RxDocType>>();\n        this.documents.forEach(d => {\n            map.set(d.primary, d._data);\n        });\n        return overwriteGetterForCaching(\n            this,\n            'docsDataMap',\n            map\n        );\n    }\n\n    get docsMap(): Map<string, RxDocument<RxDocType>> {\n        const map = new Map<string, RxDocument<RxDocType>>();\n        const documents = this.documents;\n        for (let i = 0; i < documents.length; i++) {\n            const doc = documents[i];\n            map.set(doc.primary, doc);\n        }\n        return overwriteGetterForCaching(\n            this,\n            'docsMap',\n            map\n        );\n    }\n}\n"],"mappings":";AAAA,SAASA,2BAA2B,QAAQ,gBAAgB;AAC5D,SAASC,GAAG,EAAEC,yBAAyB,QAAQ,0BAA0B;AAOzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,mBAAmB;EAC5B;AACJ;AACA;AACA;AACA;;EAGI,SAAAA,oBACoBC,UAAmC;EACnD;EACAC,2BAAwD;EACxD;EACgBC,KAAa,EAC/B;IAAA,KARcC,IAAI,GAAGN,GAAG,CAAC,CAAC;IAAA,KAGRG,UAAmC,GAAnCA,UAAmC;IAAA,KAInCE,KAAa,GAAbA,KAAa;IAE7B,IAAI,CAACE,SAAS,GAAGR,2BAA2B,CAAiB,IAAI,CAACI,UAAU,CAACK,SAAS,EAAEJ,2BAA2B,CAAC;EACxH;;EAGA;AACJ;AACA;AACA;AACA;AACA;EALI,OAAAK,YAAA,CAAAP,mBAAA;IAAAQ,GAAA;IAAAC,GAAA,EAMA,SAAAA,CAAA,EAA4C;MACxC,OAAOV,yBAAyB,CAC5B,IAAI,EACJ,UAAU,EACV,IAAI,CAACM,SAAS,CAACK,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,CACnC,CAAC;IACL;;IAGA;EAAA;IAAAJ,GAAA;IAAAC,GAAA,EACA,SAAAA,CAAA,EAA0D;MACtD,IAAMC,GAAG,GAAG,IAAIG,GAAG,CAAoC,CAAC;MACxD,IAAI,CAACR,SAAS,CAACS,OAAO,CAACH,CAAC,IAAI;QACxBD,GAAG,CAACK,GAAG,CAACJ,CAAC,CAACK,OAAO,EAAEL,CAAC,CAACC,KAAK,CAAC;MAC/B,CAAC,CAAC;MACF,OAAOb,yBAAyB,CAC5B,IAAI,EACJ,aAAa,EACbW,GACJ,CAAC;IACL;EAAC;IAAAF,GAAA;IAAAC,GAAA,EAED,SAAAA,CAAA,EAAkD;MAC9C,IAAMC,GAAG,GAAG,IAAIG,GAAG,CAAgC,CAAC;MACpD,IAAMR,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,SAAS,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;QACvC,IAAME,GAAG,GAAGd,SAAS,CAACY,CAAC,CAAC;QACxBP,GAAG,CAACK,GAAG,CAACI,GAAG,CAACH,OAAO,EAAEG,GAAG,CAAC;MAC7B;MACA,OAAOpB,yBAAyB,CAC5B,IAAI,EACJ,SAAS,EACTW,GACJ,CAAC;IACL;EAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}