{"ast":null,"code":"import { Aggregator } from \"../../aggregator\";\nimport { compose, Lazy } from \"../../lazy\";\nimport { isString } from \"../../util\";\n/**\n * Performs a union of two collections.\n *\n * @param collection\n * @param expr\n * @param opt\n */\nexport const $unionWith = (collection, expr, options) => {\n  const array = isString(expr.coll) ? options.collectionResolver(expr.coll) : expr.coll;\n  const iterators = [collection];\n  iterators.push(expr.pipeline ? new Aggregator(expr.pipeline, options).stream(array) : Lazy(array));\n  return compose(...iterators);\n};","map":{"version":3,"names":["Aggregator","compose","Lazy","isString","$unionWith","collection","expr","options","array","coll","collectionResolver","iterators","push","pipeline","stream"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/pipeline/unionWith.js"],"sourcesContent":["import { Aggregator } from \"../../aggregator\";\nimport { compose, Lazy } from \"../../lazy\";\nimport { isString } from \"../../util\";\n/**\n * Performs a union of two collections.\n *\n * @param collection\n * @param expr\n * @param opt\n */\nexport const $unionWith = (collection, expr, options) => {\n    const array = isString(expr.coll)\n        ? options.collectionResolver(expr.coll)\n        : expr.coll;\n    const iterators = [collection];\n    iterators.push(expr.pipeline\n        ? new Aggregator(expr.pipeline, options).stream(array)\n        : Lazy(array));\n    return compose(...iterators);\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,OAAO,EAAEC,IAAI,QAAQ,YAAY;AAC1C,SAASC,QAAQ,QAAQ,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACC,UAAU,EAAEC,IAAI,EAAEC,OAAO,KAAK;EACrD,MAAMC,KAAK,GAAGL,QAAQ,CAACG,IAAI,CAACG,IAAI,CAAC,GAC3BF,OAAO,CAACG,kBAAkB,CAACJ,IAAI,CAACG,IAAI,CAAC,GACrCH,IAAI,CAACG,IAAI;EACf,MAAME,SAAS,GAAG,CAACN,UAAU,CAAC;EAC9BM,SAAS,CAACC,IAAI,CAACN,IAAI,CAACO,QAAQ,GACtB,IAAIb,UAAU,CAACM,IAAI,CAACO,QAAQ,EAAEN,OAAO,CAAC,CAACO,MAAM,CAACN,KAAK,CAAC,GACpDN,IAAI,CAACM,KAAK,CAAC,CAAC;EAClB,OAAOP,OAAO,CAAC,GAAGU,SAAS,CAAC;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}