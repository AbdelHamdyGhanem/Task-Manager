{"ast":null,"code":"import { computeValue } from \"../../../core\";\nimport { assert, isNil, isString } from \"../../../util\";\n/* eslint-disable*/\nconst WHITESPACE_CHARS = [0x0000,\n// '\\0' Null character\n0x0020,\n// ' ', Space\n0x0009,\n// '\\t' Horizontal tab\n0x000a,\n// '\\n' Line feed/new line\n0x000b,\n// '\\v' Vertical tab\n0x000c,\n// '\\f' Form feed\n0x000d,\n// '\\r' Carriage return\n0x00a0,\n// Non-breaking space\n0x1680,\n// Ogham space mark\n0x2000,\n// En quad\n0x2001,\n// Em quad\n0x2002,\n// En space\n0x2003,\n// Em space\n0x2004,\n// Three-per-em space\n0x2005,\n// Four-per-em space\n0x2006,\n// Six-per-em space\n0x2007,\n// Figure space\n0x2008,\n// Punctuation space\n0x2009,\n// Thin space\n0x200a // Hair space\n];\n/**\n * Trims the resolved string\n *\n * @param obj\n * @param expr\n * @param options\n */\nexport function trimString(obj, expr, options, trimOpts) {\n  const val = computeValue(obj, expr, null, options);\n  const s = val.input;\n  if (isNil(s)) return null;\n  const codepoints = isNil(val.chars) ? WHITESPACE_CHARS : val.chars.split(\"\").map(c => c.codePointAt(0));\n  let i = 0;\n  let j = s.length - 1;\n  while (trimOpts.left && i <= j && codepoints.indexOf(s[i].codePointAt(0)) !== -1) i++;\n  while (trimOpts.right && i <= j && codepoints.indexOf(s[j].codePointAt(0)) !== -1) j--;\n  return s.substring(i, j + 1);\n}\n/**\n * Performs a regex search\n *\n * @param obj\n * @param expr\n * @param opts\n */\nexport function regexSearch(obj, expr, options, reOpts) {\n  const val = computeValue(obj, expr, null, options);\n  if (!isString(val.input)) return [];\n  const regexOptions = val.options;\n  if (regexOptions) {\n    assert(regexOptions.indexOf(\"x\") === -1, \"extended capability option 'x' not supported\");\n    assert(regexOptions.indexOf(\"g\") === -1, \"global option 'g' not supported\");\n  }\n  let input = val.input;\n  const re = new RegExp(val.regex, regexOptions);\n  let m;\n  const matches = new Array();\n  let offset = 0;\n  while (m = re.exec(input)) {\n    const result = {\n      match: m[0],\n      idx: m.index + offset,\n      captures: []\n    };\n    for (let i = 1; i < m.length; i++) result.captures.push(m[i] || null);\n    matches.push(result);\n    if (!reOpts.global) break;\n    offset = m.index + m[0].length;\n    input = input.substring(offset);\n  }\n  return matches;\n}\n/*eslint-enable*/","map":{"version":3,"names":["computeValue","assert","isNil","isString","WHITESPACE_CHARS","trimString","obj","expr","options","trimOpts","val","s","input","codepoints","chars","split","map","c","codePointAt","i","j","length","left","indexOf","right","substring","regexSearch","reOpts","regexOptions","re","RegExp","regex","m","matches","Array","offset","exec","result","match","idx","index","captures","push","global"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/string/_internal.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isString } from \"../../../util\";\n/* eslint-disable*/\nconst WHITESPACE_CHARS = [\n    0x0000, // '\\0' Null character\n    0x0020, // ' ', Space\n    0x0009, // '\\t' Horizontal tab\n    0x000a, // '\\n' Line feed/new line\n    0x000b, // '\\v' Vertical tab\n    0x000c, // '\\f' Form feed\n    0x000d, // '\\r' Carriage return\n    0x00a0, // Non-breaking space\n    0x1680, // Ogham space mark\n    0x2000, // En quad\n    0x2001, // Em quad\n    0x2002, // En space\n    0x2003, // Em space\n    0x2004, // Three-per-em space\n    0x2005, // Four-per-em space\n    0x2006, // Six-per-em space\n    0x2007, // Figure space\n    0x2008, // Punctuation space\n    0x2009, // Thin space\n    0x200a // Hair space\n];\n/**\n * Trims the resolved string\n *\n * @param obj\n * @param expr\n * @param options\n */\nexport function trimString(obj, expr, options, trimOpts) {\n    const val = computeValue(obj, expr, null, options);\n    const s = val.input;\n    if (isNil(s))\n        return null;\n    const codepoints = isNil(val.chars)\n        ? WHITESPACE_CHARS\n        : val.chars.split(\"\").map((c) => c.codePointAt(0));\n    let i = 0;\n    let j = s.length - 1;\n    while (trimOpts.left &&\n        i <= j &&\n        codepoints.indexOf(s[i].codePointAt(0)) !== -1)\n        i++;\n    while (trimOpts.right &&\n        i <= j &&\n        codepoints.indexOf(s[j].codePointAt(0)) !== -1)\n        j--;\n    return s.substring(i, j + 1);\n}\n/**\n * Performs a regex search\n *\n * @param obj\n * @param expr\n * @param opts\n */\nexport function regexSearch(obj, expr, options, reOpts) {\n    const val = computeValue(obj, expr, null, options);\n    if (!isString(val.input))\n        return [];\n    const regexOptions = val.options;\n    if (regexOptions) {\n        assert(regexOptions.indexOf(\"x\") === -1, \"extended capability option 'x' not supported\");\n        assert(regexOptions.indexOf(\"g\") === -1, \"global option 'g' not supported\");\n    }\n    let input = val.input;\n    const re = new RegExp(val.regex, regexOptions);\n    let m;\n    const matches = new Array();\n    let offset = 0;\n    while ((m = re.exec(input))) {\n        const result = {\n            match: m[0],\n            idx: m.index + offset,\n            captures: []\n        };\n        for (let i = 1; i < m.length; i++)\n            result.captures.push(m[i] || null);\n        matches.push(result);\n        if (!reOpts.global)\n            break;\n        offset = m.index + m[0].length;\n        input = input.substring(offset);\n    }\n    return matches;\n}\n/*eslint-enable*/\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACvD;AACA,MAAMC,gBAAgB,GAAG,CACrB,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM,CAAC;AAAA,CACV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACrD,MAAMC,GAAG,GAAGV,YAAY,CAACM,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EAClD,MAAMG,CAAC,GAAGD,GAAG,CAACE,KAAK;EACnB,IAAIV,KAAK,CAACS,CAAC,CAAC,EACR,OAAO,IAAI;EACf,MAAME,UAAU,GAAGX,KAAK,CAACQ,GAAG,CAACI,KAAK,CAAC,GAC7BV,gBAAgB,GAChBM,GAAG,CAACI,KAAK,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;EACtD,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAGT,CAAC,CAACU,MAAM,GAAG,CAAC;EACpB,OAAOZ,QAAQ,CAACa,IAAI,IAChBH,CAAC,IAAIC,CAAC,IACNP,UAAU,CAACU,OAAO,CAACZ,CAAC,CAACQ,CAAC,CAAC,CAACD,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAC9CC,CAAC,EAAE;EACP,OAAOV,QAAQ,CAACe,KAAK,IACjBL,CAAC,IAAIC,CAAC,IACNP,UAAU,CAACU,OAAO,CAACZ,CAAC,CAACS,CAAC,CAAC,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAC9CE,CAAC,EAAE;EACP,OAAOT,CAAC,CAACc,SAAS,CAACN,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,WAAWA,CAACpB,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAEmB,MAAM,EAAE;EACpD,MAAMjB,GAAG,GAAGV,YAAY,CAACM,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EAClD,IAAI,CAACL,QAAQ,CAACO,GAAG,CAACE,KAAK,CAAC,EACpB,OAAO,EAAE;EACb,MAAMgB,YAAY,GAAGlB,GAAG,CAACF,OAAO;EAChC,IAAIoB,YAAY,EAAE;IACd3B,MAAM,CAAC2B,YAAY,CAACL,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,8CAA8C,CAAC;IACxFtB,MAAM,CAAC2B,YAAY,CAACL,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,iCAAiC,CAAC;EAC/E;EACA,IAAIX,KAAK,GAAGF,GAAG,CAACE,KAAK;EACrB,MAAMiB,EAAE,GAAG,IAAIC,MAAM,CAACpB,GAAG,CAACqB,KAAK,EAAEH,YAAY,CAAC;EAC9C,IAAII,CAAC;EACL,MAAMC,OAAO,GAAG,IAAIC,KAAK,CAAC,CAAC;EAC3B,IAAIC,MAAM,GAAG,CAAC;EACd,OAAQH,CAAC,GAAGH,EAAE,CAACO,IAAI,CAACxB,KAAK,CAAC,EAAG;IACzB,MAAMyB,MAAM,GAAG;MACXC,KAAK,EAAEN,CAAC,CAAC,CAAC,CAAC;MACXO,GAAG,EAAEP,CAAC,CAACQ,KAAK,GAAGL,MAAM;MACrBM,QAAQ,EAAE;IACd,CAAC;IACD,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,CAAC,CAACX,MAAM,EAAEF,CAAC,EAAE,EAC7BkB,MAAM,CAACI,QAAQ,CAACC,IAAI,CAACV,CAAC,CAACb,CAAC,CAAC,IAAI,IAAI,CAAC;IACtCc,OAAO,CAACS,IAAI,CAACL,MAAM,CAAC;IACpB,IAAI,CAACV,MAAM,CAACgB,MAAM,EACd;IACJR,MAAM,GAAGH,CAAC,CAACQ,KAAK,GAAGR,CAAC,CAAC,CAAC,CAAC,CAACX,MAAM;IAC9BT,KAAK,GAAGA,KAAK,CAACa,SAAS,CAACU,MAAM,CAAC;EACnC;EACA,OAAOF,OAAO;AAClB;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}