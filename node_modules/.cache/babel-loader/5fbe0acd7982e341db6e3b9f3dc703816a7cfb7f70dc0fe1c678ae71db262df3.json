{"ast":null,"code":"/**\n * Conditional Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#conditional-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { truthy } from \"../../../util\";\n/**\n * An operator that evaluates a series of case expressions. When it finds an expression which\n * evaluates to true, it returns the resulting expression for that case. If none of the cases\n * evaluate to true, it returns the default expression.\n *\n * @param obj\n * @param expr\n */\nexport const $switch = (obj, expr, options) => {\n  let thenExpr = null;\n  // Array.prototype.find not supported in IE, hence the '.some()' proxy\n  expr.branches.some(b => {\n    const condition = truthy(computeValue(obj, b.case, null, options), options.useStrictMode);\n    if (condition) thenExpr = b.then;\n    return condition;\n  });\n  return computeValue(obj, thenExpr !== null ? thenExpr : expr.default, null, options);\n};","map":{"version":3,"names":["computeValue","truthy","$switch","obj","expr","options","thenExpr","branches","some","b","condition","case","useStrictMode","then","default"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/conditional/switch.js"],"sourcesContent":["/**\n * Conditional Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#conditional-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { truthy } from \"../../../util\";\n/**\n * An operator that evaluates a series of case expressions. When it finds an expression which\n * evaluates to true, it returns the resulting expression for that case. If none of the cases\n * evaluate to true, it returns the default expression.\n *\n * @param obj\n * @param expr\n */\nexport const $switch = (obj, expr, options) => {\n    let thenExpr = null;\n    // Array.prototype.find not supported in IE, hence the '.some()' proxy\n    expr.branches.some((b) => {\n        const condition = truthy(computeValue(obj, b.case, null, options), options.useStrictMode);\n        if (condition)\n            thenExpr = b.then;\n        return condition;\n    });\n    return computeValue(obj, thenExpr !== null ? thenExpr : expr.default, null, options);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,QAAQ,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC3C,IAAIC,QAAQ,GAAG,IAAI;EACnB;EACAF,IAAI,CAACG,QAAQ,CAACC,IAAI,CAAEC,CAAC,IAAK;IACtB,MAAMC,SAAS,GAAGT,MAAM,CAACD,YAAY,CAACG,GAAG,EAAEM,CAAC,CAACE,IAAI,EAAE,IAAI,EAAEN,OAAO,CAAC,EAAEA,OAAO,CAACO,aAAa,CAAC;IACzF,IAAIF,SAAS,EACTJ,QAAQ,GAAGG,CAAC,CAACI,IAAI;IACrB,OAAOH,SAAS;EACpB,CAAC,CAAC;EACF,OAAOV,YAAY,CAACG,GAAG,EAAEG,QAAQ,KAAK,IAAI,GAAGA,QAAQ,GAAGF,IAAI,CAACU,OAAO,EAAE,IAAI,EAAET,OAAO,CAAC;AACxF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}