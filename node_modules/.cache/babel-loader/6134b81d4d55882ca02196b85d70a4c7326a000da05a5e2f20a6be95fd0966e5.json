{"ast":null,"code":"/**\n * Compute the standard deviation of the data set\n * @param {Array} array of numbers\n * @param {Boolean} if true calculates a sample standard deviation, otherwise calculates a population stddev\n * @return {Number}\n */\nexport function stddev(data, sampled = true) {\n  const sum = data.reduce((acc, n) => acc + n, 0);\n  const N = data.length || 1;\n  const avg = sum / N;\n  return Math.sqrt(data.reduce((acc, n) => acc + Math.pow(n - avg, 2), 0) / (N - Number(sampled)));\n}\nexport function covariance(dataset, sampled = true) {\n  if (!dataset) return null;\n  if (dataset.length < 2) return sampled ? null : 0;\n  let meanX = 0.0;\n  let meanY = 0.0;\n  for (const [x, y] of dataset) {\n    meanX += x;\n    meanY += y;\n  }\n  meanX /= dataset.length;\n  meanY /= dataset.length;\n  let result = 0;\n  for (const [x, y] of dataset) {\n    result += (x - meanX) * (y - meanY);\n  }\n  return result / (dataset.length - Number(sampled));\n}","map":{"version":3,"names":["stddev","data","sampled","sum","reduce","acc","n","N","length","avg","Math","sqrt","pow","Number","covariance","dataset","meanX","meanY","x","y","result"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/accumulator/_internal.js"],"sourcesContent":["/**\n * Compute the standard deviation of the data set\n * @param {Array} array of numbers\n * @param {Boolean} if true calculates a sample standard deviation, otherwise calculates a population stddev\n * @return {Number}\n */\nexport function stddev(data, sampled = true) {\n    const sum = data.reduce((acc, n) => acc + n, 0);\n    const N = data.length || 1;\n    const avg = sum / N;\n    return Math.sqrt(data.reduce((acc, n) => acc + Math.pow(n - avg, 2), 0) /\n        (N - Number(sampled)));\n}\nexport function covariance(dataset, sampled = true) {\n    if (!dataset)\n        return null;\n    if (dataset.length < 2)\n        return sampled ? null : 0;\n    let meanX = 0.0;\n    let meanY = 0.0;\n    for (const [x, y] of dataset) {\n        meanX += x;\n        meanY += y;\n    }\n    meanX /= dataset.length;\n    meanY /= dataset.length;\n    let result = 0;\n    for (const [x, y] of dataset) {\n        result += (x - meanX) * (y - meanY);\n    }\n    return result / (dataset.length - Number(sampled));\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAMA,CAACC,IAAI,EAAEC,OAAO,GAAG,IAAI,EAAE;EACzC,MAAMC,GAAG,GAAGF,IAAI,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGC,CAAC,EAAE,CAAC,CAAC;EAC/C,MAAMC,CAAC,GAAGN,IAAI,CAACO,MAAM,IAAI,CAAC;EAC1B,MAAMC,GAAG,GAAGN,GAAG,GAAGI,CAAC;EACnB,OAAOG,IAAI,CAACC,IAAI,CAACV,IAAI,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,GAAGK,IAAI,CAACE,GAAG,CAACN,CAAC,GAAGG,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAClEF,CAAC,GAAGM,MAAM,CAACX,OAAO,CAAC,CAAC,CAAC;AAC9B;AACA,OAAO,SAASY,UAAUA,CAACC,OAAO,EAAEb,OAAO,GAAG,IAAI,EAAE;EAChD,IAAI,CAACa,OAAO,EACR,OAAO,IAAI;EACf,IAAIA,OAAO,CAACP,MAAM,GAAG,CAAC,EAClB,OAAON,OAAO,GAAG,IAAI,GAAG,CAAC;EAC7B,IAAIc,KAAK,GAAG,GAAG;EACf,IAAIC,KAAK,GAAG,GAAG;EACf,KAAK,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,IAAIJ,OAAO,EAAE;IAC1BC,KAAK,IAAIE,CAAC;IACVD,KAAK,IAAIE,CAAC;EACd;EACAH,KAAK,IAAID,OAAO,CAACP,MAAM;EACvBS,KAAK,IAAIF,OAAO,CAACP,MAAM;EACvB,IAAIY,MAAM,GAAG,CAAC;EACd,KAAK,MAAM,CAACF,CAAC,EAAEC,CAAC,CAAC,IAAIJ,OAAO,EAAE;IAC1BK,MAAM,IAAI,CAACF,CAAC,GAAGF,KAAK,KAAKG,CAAC,GAAGF,KAAK,CAAC;EACvC;EACA,OAAOG,MAAM,IAAIL,OAAO,CAACP,MAAM,GAAGK,MAAM,CAACX,OAAO,CAAC,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}