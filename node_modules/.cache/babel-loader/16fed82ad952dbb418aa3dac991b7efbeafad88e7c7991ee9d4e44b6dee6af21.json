{"ast":null,"code":"import { computeValue } from \"../../../core\";\nimport { isNil, isNumber, isString } from \"../../../util\";\nexport class TypeConvertError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\nexport function toInteger(obj, expr, options, max, min, typename) {\n  const val = computeValue(obj, expr, null, options);\n  if (isNil(val)) return null;\n  if (val instanceof Date) return val.getTime();\n  if (val === true) return 1;\n  if (val === false) return 0;\n  const n = Number(val);\n  if (isNumber(n) && n >= min && n <= max) {\n    // weirdly a decimal in string format cannot be converted to int.\n    // so we must check input if not string or if it is, not in decimal format\n    if (!isString(val) || n.toString().indexOf(\".\") === -1) {\n      return Math.trunc(n);\n    }\n  }\n  throw new TypeConvertError(`cannot convert '${val}' to ${typename}`);\n}","map":{"version":3,"names":["computeValue","isNil","isNumber","isString","TypeConvertError","Error","constructor","message","toInteger","obj","expr","options","max","min","typename","val","Date","getTime","n","Number","toString","indexOf","Math","trunc"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/type/_internal.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNil, isNumber, isString } from \"../../../util\";\nexport class TypeConvertError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexport function toInteger(obj, expr, options, max, min, typename) {\n    const val = computeValue(obj, expr, null, options);\n    if (isNil(val))\n        return null;\n    if (val instanceof Date)\n        return val.getTime();\n    if (val === true)\n        return 1;\n    if (val === false)\n        return 0;\n    const n = Number(val);\n    if (isNumber(n) && n >= min && n <= max) {\n        // weirdly a decimal in string format cannot be converted to int.\n        // so we must check input if not string or if it is, not in decimal format\n        if (!isString(val) || n.toString().indexOf(\".\") === -1) {\n            return Math.trunc(n);\n        }\n    }\n    throw new TypeConvertError(`cannot convert '${val}' to ${typename}`);\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,eAAe;AACzD,OAAO,MAAMC,gBAAgB,SAASC,KAAK,CAAC;EACxCC,WAAWA,CAACC,OAAO,EAAE;IACjB,KAAK,CAACA,OAAO,CAAC;EAClB;AACJ;AACA,OAAO,SAASC,SAASA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAEC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,EAAE;EAC9D,MAAMC,GAAG,GAAGf,YAAY,CAACS,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EAClD,IAAIV,KAAK,CAACc,GAAG,CAAC,EACV,OAAO,IAAI;EACf,IAAIA,GAAG,YAAYC,IAAI,EACnB,OAAOD,GAAG,CAACE,OAAO,CAAC,CAAC;EACxB,IAAIF,GAAG,KAAK,IAAI,EACZ,OAAO,CAAC;EACZ,IAAIA,GAAG,KAAK,KAAK,EACb,OAAO,CAAC;EACZ,MAAMG,CAAC,GAAGC,MAAM,CAACJ,GAAG,CAAC;EACrB,IAAIb,QAAQ,CAACgB,CAAC,CAAC,IAAIA,CAAC,IAAIL,GAAG,IAAIK,CAAC,IAAIN,GAAG,EAAE;IACrC;IACA;IACA,IAAI,CAACT,QAAQ,CAACY,GAAG,CAAC,IAAIG,CAAC,CAACE,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MACpD,OAAOC,IAAI,CAACC,KAAK,CAACL,CAAC,CAAC;IACxB;EACJ;EACA,MAAM,IAAId,gBAAgB,CAAC,mBAAmBW,GAAG,QAAQD,QAAQ,EAAE,CAAC;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}