{"ast":null,"code":"/**\n * represents the parents of a single node\n */\nexport class Parents {\n  node;\n  parents = new Set();\n  constructor(node) {\n    this.node = node;\n  }\n  remove(node) {\n    this.parents.delete(node);\n    if (this.parents.size === 0) {\n      this.node.remove();\n    }\n  }\n  getAll() {\n    return Array.from(this.parents);\n  }\n  add(node) {\n    if (this.node.level === node.level) {\n      throw new Error('a node cannot be parent of a node with the same level');\n    }\n    this.parents.add(node);\n  }\n  has(node) {\n    return this.parents.has(node);\n  }\n  toString() {\n    const ret = [];\n    for (const parent of this.parents) {\n      ret.push(parent.id);\n    }\n    return ret.join(', ');\n  }\n  get size() {\n    return this.parents.size;\n  }\n}","map":{"version":3,"names":["Parents","node","parents","Set","constructor","remove","delete","size","getAll","Array","from","add","level","Error","has","toString","ret","parent","push","id","join"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/binary-decision-diagram/src/parents.ts"],"sourcesContent":["import type {\n    NonLeafNode,\n    NonRootNode\n} from './types.js';\n\n/**\n * represents the parents of a single node\n */\nexport class Parents {\n\n    private parents: Set<NonLeafNode> = new Set();\n\n    constructor(\n        public node: NonRootNode\n    ) { }\n\n    public remove(node: NonLeafNode) {\n        this.parents.delete(node);\n\n        if (this.parents.size === 0) {\n            this.node.remove();\n        }\n    }\n\n    public getAll(): NonLeafNode[] {\n        return Array.from(this.parents);\n    }\n\n    public add(node: NonLeafNode) {\n        if (this.node.level === node.level) {\n            throw new Error('a node cannot be parent of a node with the same level');\n        }\n        this.parents.add(node);\n    }\n\n    public has(node: NonLeafNode) {\n        return this.parents.has(node);\n    }\n\n    toString() {\n        const ret: string[] = [];\n        for (const parent of this.parents) {\n            ret.push(parent.id);\n        }\n        return ret.join(', ');\n    }\n\n    get size(): number {\n        return this.parents.size;\n    }\n}\n"],"mappings":"AAKA;;;AAGA,OAAM,MAAOA,OAAO;EAKLC,IAAA;EAHHC,OAAO,GAAqB,IAAIC,GAAG,EAAE;EAE7CC,YACWH,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;EACX;EAEGI,MAAMA,CAACJ,IAAiB;IAC3B,IAAI,CAACC,OAAO,CAACI,MAAM,CAACL,IAAI,CAAC;IAEzB,IAAI,IAAI,CAACC,OAAO,CAACK,IAAI,KAAK,CAAC,EAAE;MACzB,IAAI,CAACN,IAAI,CAACI,MAAM,EAAE;IACtB;EACJ;EAEOG,MAAMA,CAAA;IACT,OAAOC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACR,OAAO,CAAC;EACnC;EAEOS,GAAGA,CAACV,IAAiB;IACxB,IAAI,IAAI,CAACA,IAAI,CAACW,KAAK,KAAKX,IAAI,CAACW,KAAK,EAAE;MAChC,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;IAC5E;IACA,IAAI,CAACX,OAAO,CAACS,GAAG,CAACV,IAAI,CAAC;EAC1B;EAEOa,GAAGA,CAACb,IAAiB;IACxB,OAAO,IAAI,CAACC,OAAO,CAACY,GAAG,CAACb,IAAI,CAAC;EACjC;EAEAc,QAAQA,CAAA;IACJ,MAAMC,GAAG,GAAa,EAAE;IACxB,KAAK,MAAMC,MAAM,IAAI,IAAI,CAACf,OAAO,EAAE;MAC/Bc,GAAG,CAACE,IAAI,CAACD,MAAM,CAACE,EAAE,CAAC;IACvB;IACA,OAAOH,GAAG,CAACI,IAAI,CAAC,IAAI,CAAC;EACzB;EAEA,IAAIb,IAAIA,CAAA;IACJ,OAAO,IAAI,CAACL,OAAO,CAACK,IAAI;EAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}