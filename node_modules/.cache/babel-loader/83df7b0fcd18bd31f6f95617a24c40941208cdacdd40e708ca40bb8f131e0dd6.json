{"ast":null,"code":"// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { assert, isArray, isEqual, isNil } from \"../../../util\";\n/**\n * Searches an array for an occurrence of a specified value and returns the array index of the first occurrence.\n * If the substring is not found, returns -1.\n *\n * @param  {Object} obj\n * @param  {*} expr\n * @return {*}\n */\nexport const $indexOfArray = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  if (isNil(args)) return null;\n  let arr = args[0];\n  const searchValue = args[1];\n  if (isNil(arr)) return null;\n  assert(isArray(arr), \"$indexOfArray expression must resolve to an array.\");\n  const start = args[2] || 0;\n  let end = args[3];\n  if (isNil(end)) end = arr.length;\n  if (start > end) return -1;\n  assert(start >= 0 && end >= 0, \"$indexOfArray expression is invalid\");\n  if (start > 0 || end < arr.length) {\n    arr = arr.slice(start, end);\n  }\n  // Array.prototype.findIndex not supported in IE9 hence this workaround\n  let index = -1;\n  arr.some((v, i) => {\n    const b = isEqual(v, searchValue);\n    if (b) index = i;\n    return b;\n  });\n  return index + start;\n};","map":{"version":3,"names":["computeValue","assert","isArray","isEqual","isNil","$indexOfArray","obj","expr","options","args","arr","searchValue","start","end","length","slice","index","some","v","i","b"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/array/indexOfArray.js"],"sourcesContent":["// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { assert, isArray, isEqual, isNil } from \"../../../util\";\n/**\n * Searches an array for an occurrence of a specified value and returns the array index of the first occurrence.\n * If the substring is not found, returns -1.\n *\n * @param  {Object} obj\n * @param  {*} expr\n * @return {*}\n */\nexport const $indexOfArray = (obj, expr, options) => {\n    const args = computeValue(obj, expr, null, options);\n    if (isNil(args))\n        return null;\n    let arr = args[0];\n    const searchValue = args[1];\n    if (isNil(arr))\n        return null;\n    assert(isArray(arr), \"$indexOfArray expression must resolve to an array.\");\n    const start = args[2] || 0;\n    let end = args[3];\n    if (isNil(end))\n        end = arr.length;\n    if (start > end)\n        return -1;\n    assert(start >= 0 && end >= 0, \"$indexOfArray expression is invalid\");\n    if (start > 0 || end < arr.length) {\n        arr = arr.slice(start, end);\n    }\n    // Array.prototype.findIndex not supported in IE9 hence this workaround\n    let index = -1;\n    arr.some((v, i) => {\n        const b = isEqual(v, searchValue);\n        if (b)\n            index = i;\n        return b;\n    });\n    return index + start;\n};\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,KAAK,QAAQ,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EACjD,MAAMC,IAAI,GAAGT,YAAY,CAACM,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EACnD,IAAIJ,KAAK,CAACK,IAAI,CAAC,EACX,OAAO,IAAI;EACf,IAAIC,GAAG,GAAGD,IAAI,CAAC,CAAC,CAAC;EACjB,MAAME,WAAW,GAAGF,IAAI,CAAC,CAAC,CAAC;EAC3B,IAAIL,KAAK,CAACM,GAAG,CAAC,EACV,OAAO,IAAI;EACfT,MAAM,CAACC,OAAO,CAACQ,GAAG,CAAC,EAAE,oDAAoD,CAAC;EAC1E,MAAME,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;EAC1B,IAAII,GAAG,GAAGJ,IAAI,CAAC,CAAC,CAAC;EACjB,IAAIL,KAAK,CAACS,GAAG,CAAC,EACVA,GAAG,GAAGH,GAAG,CAACI,MAAM;EACpB,IAAIF,KAAK,GAAGC,GAAG,EACX,OAAO,CAAC,CAAC;EACbZ,MAAM,CAACW,KAAK,IAAI,CAAC,IAAIC,GAAG,IAAI,CAAC,EAAE,qCAAqC,CAAC;EACrE,IAAID,KAAK,GAAG,CAAC,IAAIC,GAAG,GAAGH,GAAG,CAACI,MAAM,EAAE;IAC/BJ,GAAG,GAAGA,GAAG,CAACK,KAAK,CAACH,KAAK,EAAEC,GAAG,CAAC;EAC/B;EACA;EACA,IAAIG,KAAK,GAAG,CAAC,CAAC;EACdN,GAAG,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACf,MAAMC,CAAC,GAAGjB,OAAO,CAACe,CAAC,EAAEP,WAAW,CAAC;IACjC,IAAIS,CAAC,EACDJ,KAAK,GAAGG,CAAC;IACb,OAAOC,CAAC;EACZ,CAAC,CAAC;EACF,OAAOJ,KAAK,GAAGJ,KAAK;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}