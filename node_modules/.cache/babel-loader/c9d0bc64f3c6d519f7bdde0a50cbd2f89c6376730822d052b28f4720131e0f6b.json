{"ast":null,"code":"import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil, isNumber } from \"../../../util\";\nexport const bitwise = (op, compute) => (obj, expr, options) => {\n  assert(isArray(expr), `${op}: expression must be an array.`);\n  const nums = computeValue(obj, expr, null, options);\n  if (nums.some(isNil)) return null;\n  assert(nums.every(isNumber), `${op}: expression must evalue to array of numbers.`);\n  return compute(nums);\n};","map":{"version":3,"names":["computeValue","assert","isArray","isNil","isNumber","bitwise","op","compute","obj","expr","options","nums","some","every"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/bitwise/_internal.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil, isNumber } from \"../../../util\";\nexport const bitwise = (op, compute) => (obj, expr, options) => {\n    assert(isArray(expr), `${op}: expression must be an array.`);\n    const nums = computeValue(obj, expr, null, options);\n    if (nums.some(isNil))\n        return null;\n    assert(nums.every(isNumber), `${op}: expression must evalue to array of numbers.`);\n    return compute(nums);\n};\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AAChE,OAAO,MAAMC,OAAO,GAAGA,CAACC,EAAE,EAAEC,OAAO,KAAK,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC5DT,MAAM,CAACC,OAAO,CAACO,IAAI,CAAC,EAAE,GAAGH,EAAE,gCAAgC,CAAC;EAC5D,MAAMK,IAAI,GAAGX,YAAY,CAACQ,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EACnD,IAAIC,IAAI,CAACC,IAAI,CAACT,KAAK,CAAC,EAChB,OAAO,IAAI;EACfF,MAAM,CAACU,IAAI,CAACE,KAAK,CAACT,QAAQ,CAAC,EAAE,GAAGE,EAAE,+CAA+C,CAAC;EAClF,OAAOC,OAAO,CAACI,IAAI,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}