{"ast":null,"code":"// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { assert, isArray, isBoolean, isNil } from \"../../../util\";\n/**\n * Merge two lists together.\n *\n * Transposes an array of input arrays so that the first element of the output array would be an array containing,\n * the first element of the first input array, the first element of the second input array, etc.\n *\n * @param  {Obj} obj\n * @param  {*} expr\n * @return {*}\n */\nexport const $zip = (obj, expr, options) => {\n  const inputs = computeValue(obj, expr.inputs, null, options);\n  const useLongestLength = expr.useLongestLength || false;\n  assert(isArray(inputs), \"'inputs' expression must resolve to an array\");\n  assert(isBoolean(useLongestLength), \"'useLongestLength' must be a boolean\");\n  if (isArray(expr.defaults)) {\n    assert(useLongestLength, \"'useLongestLength' must be set to true to use 'defaults'\");\n  }\n  let zipCount = 0;\n  for (let i = 0, len = inputs.length; i < len; i++) {\n    const arr = inputs[i];\n    if (isNil(arr)) return null;\n    assert(isArray(arr), \"'inputs' expression values must resolve to an array or null\");\n    zipCount = useLongestLength ? Math.max(zipCount, arr.length) : Math.min(zipCount || arr.length, arr.length);\n  }\n  const result = [];\n  const defaults = expr.defaults || [];\n  for (let i = 0; i < zipCount; i++) {\n    const temp = inputs.map((val, index) => {\n      return isNil(val[i]) ? defaults[index] || null : val[i];\n    });\n    result.push(temp);\n  }\n  return result;\n};","map":{"version":3,"names":["computeValue","assert","isArray","isBoolean","isNil","$zip","obj","expr","options","inputs","useLongestLength","defaults","zipCount","i","len","length","arr","Math","max","min","result","temp","map","val","index","push"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/array/zip.js"],"sourcesContent":["// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { assert, isArray, isBoolean, isNil } from \"../../../util\";\n/**\n * Merge two lists together.\n *\n * Transposes an array of input arrays so that the first element of the output array would be an array containing,\n * the first element of the first input array, the first element of the second input array, etc.\n *\n * @param  {Obj} obj\n * @param  {*} expr\n * @return {*}\n */\nexport const $zip = (obj, expr, options) => {\n    const inputs = computeValue(obj, expr.inputs, null, options);\n    const useLongestLength = expr.useLongestLength || false;\n    assert(isArray(inputs), \"'inputs' expression must resolve to an array\");\n    assert(isBoolean(useLongestLength), \"'useLongestLength' must be a boolean\");\n    if (isArray(expr.defaults)) {\n        assert(useLongestLength, \"'useLongestLength' must be set to true to use 'defaults'\");\n    }\n    let zipCount = 0;\n    for (let i = 0, len = inputs.length; i < len; i++) {\n        const arr = inputs[i];\n        if (isNil(arr))\n            return null;\n        assert(isArray(arr), \"'inputs' expression values must resolve to an array or null\");\n        zipCount = useLongestLength\n            ? Math.max(zipCount, arr.length)\n            : Math.min(zipCount || arr.length, arr.length);\n    }\n    const result = [];\n    const defaults = expr.defaults || [];\n    for (let i = 0; i < zipCount; i++) {\n        const temp = inputs.map((val, index) => {\n            return isNil(val[i]) ? defaults[index] || null : val[i];\n        });\n        result.push(temp);\n    }\n    return result;\n};\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,OAAO,EAAEC,SAAS,EAAEC,KAAK,QAAQ,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EACxC,MAAMC,MAAM,GAAGT,YAAY,CAACM,GAAG,EAAEC,IAAI,CAACE,MAAM,EAAE,IAAI,EAAED,OAAO,CAAC;EAC5D,MAAME,gBAAgB,GAAGH,IAAI,CAACG,gBAAgB,IAAI,KAAK;EACvDT,MAAM,CAACC,OAAO,CAACO,MAAM,CAAC,EAAE,8CAA8C,CAAC;EACvER,MAAM,CAACE,SAAS,CAACO,gBAAgB,CAAC,EAAE,sCAAsC,CAAC;EAC3E,IAAIR,OAAO,CAACK,IAAI,CAACI,QAAQ,CAAC,EAAE;IACxBV,MAAM,CAACS,gBAAgB,EAAE,0DAA0D,CAAC;EACxF;EACA,IAAIE,QAAQ,GAAG,CAAC;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGL,MAAM,CAACM,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IAC/C,MAAMG,GAAG,GAAGP,MAAM,CAACI,CAAC,CAAC;IACrB,IAAIT,KAAK,CAACY,GAAG,CAAC,EACV,OAAO,IAAI;IACff,MAAM,CAACC,OAAO,CAACc,GAAG,CAAC,EAAE,6DAA6D,CAAC;IACnFJ,QAAQ,GAAGF,gBAAgB,GACrBO,IAAI,CAACC,GAAG,CAACN,QAAQ,EAAEI,GAAG,CAACD,MAAM,CAAC,GAC9BE,IAAI,CAACE,GAAG,CAACP,QAAQ,IAAII,GAAG,CAACD,MAAM,EAAEC,GAAG,CAACD,MAAM,CAAC;EACtD;EACA,MAAMK,MAAM,GAAG,EAAE;EACjB,MAAMT,QAAQ,GAAGJ,IAAI,CAACI,QAAQ,IAAI,EAAE;EACpC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;IAC/B,MAAMQ,IAAI,GAAGZ,MAAM,CAACa,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;MACpC,OAAOpB,KAAK,CAACmB,GAAG,CAACV,CAAC,CAAC,CAAC,GAAGF,QAAQ,CAACa,KAAK,CAAC,IAAI,IAAI,GAAGD,GAAG,CAACV,CAAC,CAAC;IAC3D,CAAC,CAAC;IACFO,MAAM,CAACK,IAAI,CAACJ,IAAI,CAAC;EACrB;EACA,OAAOD,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}