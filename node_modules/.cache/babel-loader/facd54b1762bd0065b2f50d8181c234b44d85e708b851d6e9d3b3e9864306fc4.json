{"ast":null,"code":"/**\n * Type Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#type-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { isNil } from \"../../../util\";\nimport { TypeConvertError } from \"./_internal\";\nimport { $toBool } from \"./toBool\";\nimport { $toDate } from \"./toDate\";\nimport { $toDouble } from \"./toDouble\";\nimport { $toInt } from \"./toInt\";\nimport { $toLong } from \"./toLong\";\nimport { $toString } from \"./toString\";\n/**\n * Converts a value to a specified type.\n *\n * @param obj\n * @param expr\n */\nexport const $convert = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  args.onNull = args.onNull === undefined ? null : args.onNull;\n  if (isNil(args.input)) return args.onNull;\n  try {\n    switch (args.to) {\n      case 2:\n      case \"string\":\n        return $toString(obj, args.input, options);\n      case 8:\n      case \"boolean\":\n      case \"bool\":\n        return $toBool(obj, args.input, options);\n      case 9:\n      case \"date\":\n        return $toDate(obj, args.input, options);\n      case 1:\n      case 19:\n      case \"double\":\n      case \"decimal\":\n      case \"number\":\n        return $toDouble(obj, args.input, options);\n      case 16:\n      case \"int\":\n        return $toInt(obj, args.input, options);\n      case 18:\n      case \"long\":\n        return $toLong(obj, args.input, options);\n    }\n  } catch (e) {\n    /*nothing to do*/\n  }\n  if (args.onError !== undefined) return args.onError;\n  throw new TypeConvertError(`could not convert to type ${args.to}.`);\n};","map":{"version":3,"names":["computeValue","isNil","TypeConvertError","$toBool","$toDate","$toDouble","$toInt","$toLong","$toString","$convert","obj","expr","options","args","onNull","undefined","input","to","e","onError"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/type/convert.js"],"sourcesContent":["/**\n * Type Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#type-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { isNil } from \"../../../util\";\nimport { TypeConvertError } from \"./_internal\";\nimport { $toBool } from \"./toBool\";\nimport { $toDate } from \"./toDate\";\nimport { $toDouble } from \"./toDouble\";\nimport { $toInt } from \"./toInt\";\nimport { $toLong } from \"./toLong\";\nimport { $toString } from \"./toString\";\n/**\n * Converts a value to a specified type.\n *\n * @param obj\n * @param expr\n */\nexport const $convert = (obj, expr, options) => {\n    const args = computeValue(obj, expr, null, options);\n    args.onNull = args.onNull === undefined ? null : args.onNull;\n    if (isNil(args.input))\n        return args.onNull;\n    try {\n        switch (args.to) {\n            case 2:\n            case \"string\":\n                return $toString(obj, args.input, options);\n            case 8:\n            case \"boolean\":\n            case \"bool\":\n                return $toBool(obj, args.input, options);\n            case 9:\n            case \"date\":\n                return $toDate(obj, args.input, options);\n            case 1:\n            case 19:\n            case \"double\":\n            case \"decimal\":\n            case \"number\":\n                return $toDouble(obj, args.input, options);\n            case 16:\n            case \"int\":\n                return $toInt(obj, args.input, options);\n            case 18:\n            case \"long\":\n                return $toLong(obj, args.input, options);\n        }\n    }\n    catch (e) {\n        /*nothing to do*/\n    }\n    if (args.onError !== undefined)\n        return args.onError;\n    throw new TypeConvertError(`could not convert to type ${args.to}.`);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,OAAO,QAAQ,UAAU;AAClC,SAASC,OAAO,QAAQ,UAAU;AAClC,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,QAAQ,UAAU;AAClC,SAASC,SAAS,QAAQ,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC5C,MAAMC,IAAI,GAAGb,YAAY,CAACU,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EACnDC,IAAI,CAACC,MAAM,GAAGD,IAAI,CAACC,MAAM,KAAKC,SAAS,GAAG,IAAI,GAAGF,IAAI,CAACC,MAAM;EAC5D,IAAIb,KAAK,CAACY,IAAI,CAACG,KAAK,CAAC,EACjB,OAAOH,IAAI,CAACC,MAAM;EACtB,IAAI;IACA,QAAQD,IAAI,CAACI,EAAE;MACX,KAAK,CAAC;MACN,KAAK,QAAQ;QACT,OAAOT,SAAS,CAACE,GAAG,EAAEG,IAAI,CAACG,KAAK,EAAEJ,OAAO,CAAC;MAC9C,KAAK,CAAC;MACN,KAAK,SAAS;MACd,KAAK,MAAM;QACP,OAAOT,OAAO,CAACO,GAAG,EAAEG,IAAI,CAACG,KAAK,EAAEJ,OAAO,CAAC;MAC5C,KAAK,CAAC;MACN,KAAK,MAAM;QACP,OAAOR,OAAO,CAACM,GAAG,EAAEG,IAAI,CAACG,KAAK,EAAEJ,OAAO,CAAC;MAC5C,KAAK,CAAC;MACN,KAAK,EAAE;MACP,KAAK,QAAQ;MACb,KAAK,SAAS;MACd,KAAK,QAAQ;QACT,OAAOP,SAAS,CAACK,GAAG,EAAEG,IAAI,CAACG,KAAK,EAAEJ,OAAO,CAAC;MAC9C,KAAK,EAAE;MACP,KAAK,KAAK;QACN,OAAON,MAAM,CAACI,GAAG,EAAEG,IAAI,CAACG,KAAK,EAAEJ,OAAO,CAAC;MAC3C,KAAK,EAAE;MACP,KAAK,MAAM;QACP,OAAOL,OAAO,CAACG,GAAG,EAAEG,IAAI,CAACG,KAAK,EAAEJ,OAAO,CAAC;IAChD;EACJ,CAAC,CACD,OAAOM,CAAC,EAAE;IACN;EAAA;EAEJ,IAAIL,IAAI,CAACM,OAAO,KAAKJ,SAAS,EAC1B,OAAOF,IAAI,CAACM,OAAO;EACvB,MAAM,IAAIjB,gBAAgB,CAAC,6BAA6BW,IAAI,CAACI,EAAE,GAAG,CAAC;AACvE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}