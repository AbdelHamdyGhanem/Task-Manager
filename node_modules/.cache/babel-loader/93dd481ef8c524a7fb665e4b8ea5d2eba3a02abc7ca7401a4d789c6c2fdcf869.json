{"ast":null,"code":"/**\n * Truncates integer value to number of places. If roundOff is specified round value instead to the number of places\n * @param {Number} num\n * @param {Number} places\n * @param {Boolean} roundOff\n */\nexport function truncate(num, places = 0, roundOff = false) {\n  const sign = Math.abs(num) === num ? 1 : -1;\n  num = Math.abs(num);\n  let result = Math.trunc(num);\n  const decimals = parseFloat((num - result).toFixed(places + 1));\n  if (places === 0) {\n    const firstDigit = Math.trunc(10 * decimals);\n    if (roundOff && ((result & 1) === 1 && firstDigit >= 5 || firstDigit > 5)) {\n      result++;\n    }\n  } else if (places > 0) {\n    const offset = Math.pow(10, places);\n    let remainder = Math.trunc(decimals * offset);\n    // last digit before cut off\n    const lastDigit = Math.trunc(decimals * offset * 10) % 10;\n    // add one if last digit is greater than 5\n    if (roundOff && lastDigit > 5) {\n      remainder += 1;\n    }\n    // compute decimal remainder and add to whole number\n    // manually formatting float re\n    result = (result * offset + remainder) / offset;\n  } else if (places < 0) {\n    // handle negative decimal places\n    const offset = Math.pow(10, -1 * places);\n    let excess = result % offset;\n    result = Math.max(0, result - excess);\n    // for negative values the absolute must increase so we round up the last digit if >= 5\n    if (roundOff && sign === -1) {\n      while (excess > 10) {\n        excess -= excess % 10;\n      }\n      if (result > 0 && excess >= 5) {\n        result += offset;\n      }\n    }\n  }\n  return result * sign;\n}","map":{"version":3,"names":["truncate","num","places","roundOff","sign","Math","abs","result","trunc","decimals","parseFloat","toFixed","firstDigit","offset","pow","remainder","lastDigit","excess","max"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/arithmetic/_internal.js"],"sourcesContent":["/**\n * Truncates integer value to number of places. If roundOff is specified round value instead to the number of places\n * @param {Number} num\n * @param {Number} places\n * @param {Boolean} roundOff\n */\nexport function truncate(num, places = 0, roundOff = false) {\n    const sign = Math.abs(num) === num ? 1 : -1;\n    num = Math.abs(num);\n    let result = Math.trunc(num);\n    const decimals = parseFloat((num - result).toFixed(places + 1));\n    if (places === 0) {\n        const firstDigit = Math.trunc(10 * decimals);\n        if (roundOff &&\n            (((result & 1) === 1 && firstDigit >= 5) || firstDigit > 5)) {\n            result++;\n        }\n    }\n    else if (places > 0) {\n        const offset = Math.pow(10, places);\n        let remainder = Math.trunc(decimals * offset);\n        // last digit before cut off\n        const lastDigit = Math.trunc(decimals * offset * 10) % 10;\n        // add one if last digit is greater than 5\n        if (roundOff && lastDigit > 5) {\n            remainder += 1;\n        }\n        // compute decimal remainder and add to whole number\n        // manually formatting float re\n        result = (result * offset + remainder) / offset;\n    }\n    else if (places < 0) {\n        // handle negative decimal places\n        const offset = Math.pow(10, -1 * places);\n        let excess = result % offset;\n        result = Math.max(0, result - excess);\n        // for negative values the absolute must increase so we round up the last digit if >= 5\n        if (roundOff && sign === -1) {\n            while (excess > 10) {\n                excess -= excess % 10;\n            }\n            if (result > 0 && excess >= 5) {\n                result += offset;\n            }\n        }\n    }\n    return result * sign;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQA,CAACC,GAAG,EAAEC,MAAM,GAAG,CAAC,EAAEC,QAAQ,GAAG,KAAK,EAAE;EACxD,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACL,GAAG,CAAC,KAAKA,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAC3CA,GAAG,GAAGI,IAAI,CAACC,GAAG,CAACL,GAAG,CAAC;EACnB,IAAIM,MAAM,GAAGF,IAAI,CAACG,KAAK,CAACP,GAAG,CAAC;EAC5B,MAAMQ,QAAQ,GAAGC,UAAU,CAAC,CAACT,GAAG,GAAGM,MAAM,EAAEI,OAAO,CAACT,MAAM,GAAG,CAAC,CAAC,CAAC;EAC/D,IAAIA,MAAM,KAAK,CAAC,EAAE;IACd,MAAMU,UAAU,GAAGP,IAAI,CAACG,KAAK,CAAC,EAAE,GAAGC,QAAQ,CAAC;IAC5C,IAAIN,QAAQ,KACN,CAACI,MAAM,GAAG,CAAC,MAAM,CAAC,IAAIK,UAAU,IAAI,CAAC,IAAKA,UAAU,GAAG,CAAC,CAAC,EAAE;MAC7DL,MAAM,EAAE;IACZ;EACJ,CAAC,MACI,IAAIL,MAAM,GAAG,CAAC,EAAE;IACjB,MAAMW,MAAM,GAAGR,IAAI,CAACS,GAAG,CAAC,EAAE,EAAEZ,MAAM,CAAC;IACnC,IAAIa,SAAS,GAAGV,IAAI,CAACG,KAAK,CAACC,QAAQ,GAAGI,MAAM,CAAC;IAC7C;IACA,MAAMG,SAAS,GAAGX,IAAI,CAACG,KAAK,CAACC,QAAQ,GAAGI,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;IACzD;IACA,IAAIV,QAAQ,IAAIa,SAAS,GAAG,CAAC,EAAE;MAC3BD,SAAS,IAAI,CAAC;IAClB;IACA;IACA;IACAR,MAAM,GAAG,CAACA,MAAM,GAAGM,MAAM,GAAGE,SAAS,IAAIF,MAAM;EACnD,CAAC,MACI,IAAIX,MAAM,GAAG,CAAC,EAAE;IACjB;IACA,MAAMW,MAAM,GAAGR,IAAI,CAACS,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,GAAGZ,MAAM,CAAC;IACxC,IAAIe,MAAM,GAAGV,MAAM,GAAGM,MAAM;IAC5BN,MAAM,GAAGF,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEX,MAAM,GAAGU,MAAM,CAAC;IACrC;IACA,IAAId,QAAQ,IAAIC,IAAI,KAAK,CAAC,CAAC,EAAE;MACzB,OAAOa,MAAM,GAAG,EAAE,EAAE;QAChBA,MAAM,IAAIA,MAAM,GAAG,EAAE;MACzB;MACA,IAAIV,MAAM,GAAG,CAAC,IAAIU,MAAM,IAAI,CAAC,EAAE;QAC3BV,MAAM,IAAIM,MAAM;MACpB;IACJ;EACJ;EACA,OAAON,MAAM,GAAGH,IAAI;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}