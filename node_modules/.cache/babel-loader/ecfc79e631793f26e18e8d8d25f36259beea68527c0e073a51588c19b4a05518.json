{"ast":null,"code":"// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { ComputeOptions, computeValue } from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\n/**\n * Applies an expression to each element in an array and combines them into a single value.\n *\n * @param {Object} obj\n * @param {*} expr\n */\nexport const $reduce = (obj, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  const input = computeValue(obj, expr.input, null, copts);\n  const initialValue = computeValue(obj, expr.initialValue, null, copts);\n  const inExpr = expr[\"in\"];\n  if (isNil(input)) return null;\n  assert(isArray(input), \"$reduce 'input' expression must resolve to an array\");\n  return input.reduce((acc, n) => {\n    return computeValue(n, inExpr, null, copts.update(copts.root, {\n      variables: {\n        value: acc\n      }\n    }));\n  }, initialValue);\n};","map":{"version":3,"names":["ComputeOptions","computeValue","assert","isArray","isNil","$reduce","obj","expr","options","copts","init","input","initialValue","inExpr","reduce","acc","n","update","root","variables","value"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/array/reduce.js"],"sourcesContent":["// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { ComputeOptions, computeValue } from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\n/**\n * Applies an expression to each element in an array and combines them into a single value.\n *\n * @param {Object} obj\n * @param {*} expr\n */\nexport const $reduce = (obj, expr, options) => {\n    const copts = ComputeOptions.init(options);\n    const input = computeValue(obj, expr.input, null, copts);\n    const initialValue = computeValue(obj, expr.initialValue, null, copts);\n    const inExpr = expr[\"in\"];\n    if (isNil(input))\n        return null;\n    assert(isArray(input), \"$reduce 'input' expression must resolve to an array\");\n    return input.reduce((acc, n) => {\n        return computeValue(n, inExpr, null, copts.update(copts.root, {\n            variables: { value: acc }\n        }));\n    }, initialValue);\n};\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,YAAY,QAAQ,eAAe;AAC5D,SAASC,MAAM,EAAEC,OAAO,EAAEC,KAAK,QAAQ,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC3C,MAAMC,KAAK,GAAGT,cAAc,CAACU,IAAI,CAACF,OAAO,CAAC;EAC1C,MAAMG,KAAK,GAAGV,YAAY,CAACK,GAAG,EAAEC,IAAI,CAACI,KAAK,EAAE,IAAI,EAAEF,KAAK,CAAC;EACxD,MAAMG,YAAY,GAAGX,YAAY,CAACK,GAAG,EAAEC,IAAI,CAACK,YAAY,EAAE,IAAI,EAAEH,KAAK,CAAC;EACtE,MAAMI,MAAM,GAAGN,IAAI,CAAC,IAAI,CAAC;EACzB,IAAIH,KAAK,CAACO,KAAK,CAAC,EACZ,OAAO,IAAI;EACfT,MAAM,CAACC,OAAO,CAACQ,KAAK,CAAC,EAAE,qDAAqD,CAAC;EAC7E,OAAOA,KAAK,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;IAC5B,OAAOf,YAAY,CAACe,CAAC,EAAEH,MAAM,EAAE,IAAI,EAAEJ,KAAK,CAACQ,MAAM,CAACR,KAAK,CAACS,IAAI,EAAE;MAC1DC,SAAS,EAAE;QAAEC,KAAK,EAAEL;MAAI;IAC5B,CAAC,CAAC,CAAC;EACP,CAAC,EAAEH,YAAY,CAAC;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}