{"ast":null,"code":"/**\n * Set Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#set-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { intersection } from \"../../../util\";\n/**\n * Returns true if all elements of a set appear in a second set.\n * @param obj\n * @param expr\n */\nexport const $setIsSubset = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  return intersection(args, options === null || options === void 0 ? void 0 : options.hashFunction).length === args[0].length;\n};","map":{"version":3,"names":["computeValue","intersection","$setIsSubset","obj","expr","options","args","hashFunction","length"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/set/setIsSubset.js"],"sourcesContent":["/**\n * Set Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#set-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { intersection } from \"../../../util\";\n/**\n * Returns true if all elements of a set appear in a second set.\n * @param obj\n * @param expr\n */\nexport const $setIsSubset = (obj, expr, options) => {\n    const args = computeValue(obj, expr, null, options);\n    return intersection(args, options === null || options === void 0 ? void 0 : options.hashFunction).length === args[0].length;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,YAAY,QAAQ,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAChD,MAAMC,IAAI,GAAGN,YAAY,CAACG,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EACnD,OAAOJ,YAAY,CAACK,IAAI,EAAED,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACE,YAAY,CAAC,CAACC,MAAM,KAAKF,IAAI,CAAC,CAAC,CAAC,CAACE,MAAM;AAC/H,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}