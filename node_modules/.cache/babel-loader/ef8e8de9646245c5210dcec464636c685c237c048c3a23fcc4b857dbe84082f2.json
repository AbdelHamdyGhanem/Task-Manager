{"ast":null,"code":"// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { assert, isArray } from \"../../../util\";\nimport { $or } from \"./or\";\n/**\n * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n *\n * @param selector\n * @param rhs\n * @returns {Function}\n */\nexport const $nor = (_, rhs, options) => {\n  assert(isArray(rhs), \"Invalid expression. $nor expects value to be an array.\");\n  const f = $or(\"$or\", rhs, options);\n  return obj => !f(obj);\n};","map":{"version":3,"names":["assert","isArray","$or","$nor","_","rhs","options","f","obj"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/query/logical/nor.js"],"sourcesContent":["// Query Logical Operators: https://docs.mongodb.com/manual/reference/operator/query-logical/\nimport { assert, isArray } from \"../../../util\";\nimport { $or } from \"./or\";\n/**\n * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n *\n * @param selector\n * @param rhs\n * @returns {Function}\n */\nexport const $nor = (_, rhs, options) => {\n    assert(isArray(rhs), \"Invalid expression. $nor expects value to be an array.\");\n    const f = $or(\"$or\", rhs, options);\n    return (obj) => !f(obj);\n};\n"],"mappings":"AAAA;AACA,SAASA,MAAM,EAAEC,OAAO,QAAQ,eAAe;AAC/C,SAASC,GAAG,QAAQ,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAGA,CAACC,CAAC,EAAEC,GAAG,EAAEC,OAAO,KAAK;EACrCN,MAAM,CAACC,OAAO,CAACI,GAAG,CAAC,EAAE,wDAAwD,CAAC;EAC9E,MAAME,CAAC,GAAGL,GAAG,CAAC,KAAK,EAAEG,GAAG,EAAEC,OAAO,CAAC;EAClC,OAAQE,GAAG,IAAK,CAACD,CAAC,CAACC,GAAG,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}