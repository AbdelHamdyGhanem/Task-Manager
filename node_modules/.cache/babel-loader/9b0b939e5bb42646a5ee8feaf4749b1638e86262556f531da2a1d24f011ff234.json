{"ast":null,"code":"import { booleanToBooleanString } from '../util.js';\nexport function resolveWithSimpleBdd(simpleBdd, fns, input) {\n  let currentNode = simpleBdd;\n  let currentLevel = simpleBdd.l;\n  while (true) {\n    const booleanResult = fns[currentLevel](input);\n    const branchKey = booleanToBooleanString(booleanResult);\n    currentNode = currentNode[branchKey];\n    if (typeof currentNode === 'number' || typeof currentNode === 'string') {\n      return currentNode;\n    } else {\n      currentLevel = currentNode.l;\n    }\n  }\n}","map":{"version":3,"names":["booleanToBooleanString","resolveWithSimpleBdd","simpleBdd","fns","input","currentNode","currentLevel","l","booleanResult","branchKey"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/binary-decision-diagram/src/minimal-string/resolve-with-simple-bdd.ts"],"sourcesContent":["import {\n    SimpleBdd,\n    ResolverFunctions,\n    SimpleBddLeafNode\n} from '../types.js';\nimport { booleanToBooleanString } from '../util.js';\n\nexport function resolveWithSimpleBdd(\n    simpleBdd: SimpleBdd,\n    fns: ResolverFunctions,\n    input: any\n): number {\n    let currentNode: SimpleBdd | SimpleBddLeafNode = simpleBdd;\n    let currentLevel: number = simpleBdd.l;\n    while (true) {\n        const booleanResult = fns[currentLevel](input);\n        const branchKey = booleanToBooleanString(booleanResult);\n        currentNode = currentNode[branchKey];\n        if (typeof currentNode === 'number' || typeof currentNode === 'string') {\n            return currentNode as any;\n        } else {\n            currentLevel = currentNode.l;\n        }\n    }\n}\n"],"mappings":"AAKA,SAASA,sBAAsB,QAAQ,YAAY;AAEnD,OAAM,SAAUC,oBAAoBA,CAChCC,SAAoB,EACpBC,GAAsB,EACtBC,KAAU;EAEV,IAAIC,WAAW,GAAkCH,SAAS;EAC1D,IAAII,YAAY,GAAWJ,SAAS,CAACK,CAAC;EACtC,OAAO,IAAI,EAAE;IACT,MAAMC,aAAa,GAAGL,GAAG,CAACG,YAAY,CAAC,CAACF,KAAK,CAAC;IAC9C,MAAMK,SAAS,GAAGT,sBAAsB,CAACQ,aAAa,CAAC;IACvDH,WAAW,GAAGA,WAAW,CAACI,SAAS,CAAC;IACpC,IAAI,OAAOJ,WAAW,KAAK,QAAQ,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;MACpE,OAAOA,WAAkB;IAC7B,CAAC,MAAM;MACHC,YAAY,GAAGD,WAAW,CAACE,CAAC;IAChC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}