{"ast":null,"code":"import { minBinaryWithLength, maxBinaryWithLength, getNextStateSet } from './util.js';\n/**\n * fills each missing row of a table\n * with the given value\n */\nexport function fillTruthTable(truthTable, inputLength, value) {\n  const endInput = maxBinaryWithLength(inputLength);\n  let currentInput = minBinaryWithLength(inputLength);\n  let done = false;\n  while (!done) {\n    if (!truthTable.has(currentInput)) {\n      truthTable.set(currentInput, value);\n    }\n    if (currentInput === endInput) {\n      done = true;\n    } else {\n      currentInput = getNextStateSet(currentInput);\n    }\n  }\n}","map":{"version":3,"names":["minBinaryWithLength","maxBinaryWithLength","getNextStateSet","fillTruthTable","truthTable","inputLength","value","endInput","currentInput","done","has","set"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/binary-decision-diagram/src/fill-truth-table.ts"],"sourcesContent":["import {\n    minBinaryWithLength,\n    maxBinaryWithLength,\n    getNextStateSet\n} from './util.js';\nimport type { TruthTable } from './types.js';\n\n/**\n * fills each missing row of a table\n * with the given value\n */\nexport function fillTruthTable(\n    truthTable: TruthTable,\n    inputLength: number,\n    value: number\n) {\n    const endInput = maxBinaryWithLength(inputLength);\n    let currentInput = minBinaryWithLength(inputLength);\n    let done = false;\n    while (!done) {\n        if (!truthTable.has(currentInput)) {\n            truthTable.set(\n                currentInput,\n                value\n            );\n        }\n        if (currentInput === endInput) {\n            done = true;\n        } else {\n            currentInput = getNextStateSet(\n                currentInput\n            );\n        }\n    }\n}\n"],"mappings":"AAAA,SACIA,mBAAmB,EACnBC,mBAAmB,EACnBC,eAAe,QACZ,WAAW;AAGlB;;;;AAIA,OAAM,SAAUC,cAAcA,CAC1BC,UAAsB,EACtBC,WAAmB,EACnBC,KAAa;EAEb,MAAMC,QAAQ,GAAGN,mBAAmB,CAACI,WAAW,CAAC;EACjD,IAAIG,YAAY,GAAGR,mBAAmB,CAACK,WAAW,CAAC;EACnD,IAAII,IAAI,GAAG,KAAK;EAChB,OAAO,CAACA,IAAI,EAAE;IACV,IAAI,CAACL,UAAU,CAACM,GAAG,CAACF,YAAY,CAAC,EAAE;MAC/BJ,UAAU,CAACO,GAAG,CACVH,YAAY,EACZF,KAAK,CACR;IACL;IACA,IAAIE,YAAY,KAAKD,QAAQ,EAAE;MAC3BE,IAAI,GAAG,IAAI;IACf,CAAC,MAAM;MACHD,YAAY,GAAGN,eAAe,CAC1BM,YAAY,CACf;IACL;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}