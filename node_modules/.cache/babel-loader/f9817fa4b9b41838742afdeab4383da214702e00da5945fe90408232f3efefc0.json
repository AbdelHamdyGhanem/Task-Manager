{"ast":null,"code":"// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { ComputeOptions, computeValue } from \"../../../core\";\nimport { assert, isArray, truthy } from \"../../../util\";\n/**\n * Selects a subset of the array to return an array with only the elements that match the filter condition.\n *\n * @param  {Object} obj The current document\n * @param  {*} expr The filter spec\n * @return {*}\n */\nexport const $filter = (obj, expr, options) => {\n  const input = computeValue(obj, expr.input, null, options);\n  assert(isArray(input), \"$filter 'input' expression must resolve to an array\");\n  const copts = ComputeOptions.init(options, obj);\n  const k = expr.as || \"this\";\n  const local = {\n    variables: {\n      [k]: null\n    }\n  };\n  return input.filter(o => {\n    local.variables[k] = o;\n    const b = computeValue(obj, expr.cond, null, copts.update(copts.root, local));\n    // allow empty strings only in strict MongoDB mode (default).\n    return truthy(b, options.useStrictMode);\n  });\n};","map":{"version":3,"names":["ComputeOptions","computeValue","assert","isArray","truthy","$filter","obj","expr","options","input","copts","init","k","as","local","variables","filter","o","b","cond","update","root","useStrictMode"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/array/filter.js"],"sourcesContent":["// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { ComputeOptions, computeValue } from \"../../../core\";\nimport { assert, isArray, truthy } from \"../../../util\";\n/**\n * Selects a subset of the array to return an array with only the elements that match the filter condition.\n *\n * @param  {Object} obj The current document\n * @param  {*} expr The filter spec\n * @return {*}\n */\nexport const $filter = (obj, expr, options) => {\n    const input = computeValue(obj, expr.input, null, options);\n    assert(isArray(input), \"$filter 'input' expression must resolve to an array\");\n    const copts = ComputeOptions.init(options, obj);\n    const k = expr.as || \"this\";\n    const local = {\n        variables: { [k]: null }\n    };\n    return input.filter((o) => {\n        local.variables[k] = o;\n        const b = computeValue(obj, expr.cond, null, copts.update(copts.root, local));\n        // allow empty strings only in strict MongoDB mode (default).\n        return truthy(b, options.useStrictMode);\n    });\n};\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,YAAY,QAAQ,eAAe;AAC5D,SAASC,MAAM,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC3C,MAAMC,KAAK,GAAGR,YAAY,CAACK,GAAG,EAAEC,IAAI,CAACE,KAAK,EAAE,IAAI,EAAED,OAAO,CAAC;EAC1DN,MAAM,CAACC,OAAO,CAACM,KAAK,CAAC,EAAE,qDAAqD,CAAC;EAC7E,MAAMC,KAAK,GAAGV,cAAc,CAACW,IAAI,CAACH,OAAO,EAAEF,GAAG,CAAC;EAC/C,MAAMM,CAAC,GAAGL,IAAI,CAACM,EAAE,IAAI,MAAM;EAC3B,MAAMC,KAAK,GAAG;IACVC,SAAS,EAAE;MAAE,CAACH,CAAC,GAAG;IAAK;EAC3B,CAAC;EACD,OAAOH,KAAK,CAACO,MAAM,CAAEC,CAAC,IAAK;IACvBH,KAAK,CAACC,SAAS,CAACH,CAAC,CAAC,GAAGK,CAAC;IACtB,MAAMC,CAAC,GAAGjB,YAAY,CAACK,GAAG,EAAEC,IAAI,CAACY,IAAI,EAAE,IAAI,EAAET,KAAK,CAACU,MAAM,CAACV,KAAK,CAACW,IAAI,EAAEP,KAAK,CAAC,CAAC;IAC7E;IACA,OAAOV,MAAM,CAACc,CAAC,EAAEV,OAAO,CAACc,aAAa,CAAC;EAC3C,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}