{"ast":null,"code":"import { compare, groupBy, into, isEmpty, isObject, isString, resolve } from \"../../util\";\n/**\n * Takes all input documents and returns them in a stream of sorted documents.\n *\n * @param collection\n * @param sortKeys\n * @param  {Object} options\n * @returns {*}\n */\nexport const $sort = (collection, sortKeys, options) => {\n  if (isEmpty(sortKeys) || !isObject(sortKeys)) return collection;\n  let cmp = compare;\n  // check for collation spec on the options\n  const collationSpec = options.collation;\n  // use collation comparator if provided\n  if (isObject(collationSpec) && isString(collationSpec.locale)) {\n    cmp = collationComparator(collationSpec);\n  }\n  return collection.transform(coll => {\n    const modifiers = Object.keys(sortKeys);\n    for (const key of modifiers.reverse()) {\n      const groups = groupBy(coll, obj => resolve(obj, key), options.hashFunction);\n      const sortedKeys = Array.from(groups.keys()).sort(cmp);\n      if (sortKeys[key] === -1) sortedKeys.reverse();\n      // reuse collection so the data is available for the next iteration of the sort modifiers.\n      coll = [];\n      sortedKeys.reduce((acc, key) => into(acc, groups.get(key)), coll);\n    }\n    return coll;\n  });\n};\n// MongoDB collation strength to JS localeCompare sensitivity mapping.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\nconst COLLATION_STRENGTH = {\n  // Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.\n  1: \"base\",\n  //  Only strings that differ in base letters or accents and other diacritic marks compare as unequal.\n  // Examples: a ≠ b, a ≠ á, a = A.\n  2: \"accent\",\n  // Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal.\n  // Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A\n  3: \"variant\"\n  // case - Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A.\n};\n/**\n * Creates a comparator function for the given collation spec. See https://docs.mongodb.com/manual/reference/collation/\n *\n * @param spec {Object} The MongoDB collation spec.\n * {\n *   locale: string,\n *   caseLevel: boolean,\n *   caseFirst: string,\n *   strength: int,\n *   numericOrdering: boolean,\n *   alternate: string,\n *   maxVariable: never, // unsupported\n *   backwards: never // unsupported\n * }\n */\nfunction collationComparator(spec) {\n  const localeOpt = {\n    sensitivity: COLLATION_STRENGTH[spec.strength || 3],\n    caseFirst: spec.caseFirst === \"off\" ? \"false\" : spec.caseFirst || \"false\",\n    numeric: spec.numericOrdering || false,\n    ignorePunctuation: spec.alternate === \"shifted\"\n  };\n  // when caseLevel is true for strength  1:base and 2:accent, bump sensitivity to the nearest that supports case comparison\n  if ((spec.caseLevel || false) === true) {\n    if (localeOpt.sensitivity === \"base\") localeOpt.sensitivity = \"case\";\n    if (localeOpt.sensitivity === \"accent\") localeOpt.sensitivity = \"variant\";\n  }\n  const collator = new Intl.Collator(spec.locale, localeOpt);\n  return (a, b) => {\n    // non strings\n    if (!isString(a) || !isString(b)) return compare(a, b);\n    // only for strings\n    const i = collator.compare(a, b);\n    if (i < 0) return -1;\n    if (i > 0) return 1;\n    return 0;\n  };\n}","map":{"version":3,"names":["compare","groupBy","into","isEmpty","isObject","isString","resolve","$sort","collection","sortKeys","options","cmp","collationSpec","collation","locale","collationComparator","transform","coll","modifiers","Object","keys","key","reverse","groups","obj","hashFunction","sortedKeys","Array","from","sort","reduce","acc","get","COLLATION_STRENGTH","spec","localeOpt","sensitivity","strength","caseFirst","numeric","numericOrdering","ignorePunctuation","alternate","caseLevel","collator","Intl","Collator","a","b","i"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/pipeline/sort.js"],"sourcesContent":["import { compare, groupBy, into, isEmpty, isObject, isString, resolve } from \"../../util\";\n/**\n * Takes all input documents and returns them in a stream of sorted documents.\n *\n * @param collection\n * @param sortKeys\n * @param  {Object} options\n * @returns {*}\n */\nexport const $sort = (collection, sortKeys, options) => {\n    if (isEmpty(sortKeys) || !isObject(sortKeys))\n        return collection;\n    let cmp = compare;\n    // check for collation spec on the options\n    const collationSpec = options.collation;\n    // use collation comparator if provided\n    if (isObject(collationSpec) && isString(collationSpec.locale)) {\n        cmp = collationComparator(collationSpec);\n    }\n    return collection.transform((coll) => {\n        const modifiers = Object.keys(sortKeys);\n        for (const key of modifiers.reverse()) {\n            const groups = groupBy(coll, (obj) => resolve(obj, key), options.hashFunction);\n            const sortedKeys = Array.from(groups.keys()).sort(cmp);\n            if (sortKeys[key] === -1)\n                sortedKeys.reverse();\n            // reuse collection so the data is available for the next iteration of the sort modifiers.\n            coll = [];\n            sortedKeys.reduce((acc, key) => into(acc, groups.get(key)), coll);\n        }\n        return coll;\n    });\n};\n// MongoDB collation strength to JS localeCompare sensitivity mapping.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\nconst COLLATION_STRENGTH = {\n    // Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.\n    1: \"base\",\n    //  Only strings that differ in base letters or accents and other diacritic marks compare as unequal.\n    // Examples: a ≠ b, a ≠ á, a = A.\n    2: \"accent\",\n    // Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal.\n    // Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A\n    3: \"variant\"\n    // case - Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A.\n};\n/**\n * Creates a comparator function for the given collation spec. See https://docs.mongodb.com/manual/reference/collation/\n *\n * @param spec {Object} The MongoDB collation spec.\n * {\n *   locale: string,\n *   caseLevel: boolean,\n *   caseFirst: string,\n *   strength: int,\n *   numericOrdering: boolean,\n *   alternate: string,\n *   maxVariable: never, // unsupported\n *   backwards: never // unsupported\n * }\n */\nfunction collationComparator(spec) {\n    const localeOpt = {\n        sensitivity: COLLATION_STRENGTH[spec.strength || 3],\n        caseFirst: spec.caseFirst === \"off\" ? \"false\" : spec.caseFirst || \"false\",\n        numeric: spec.numericOrdering || false,\n        ignorePunctuation: spec.alternate === \"shifted\"\n    };\n    // when caseLevel is true for strength  1:base and 2:accent, bump sensitivity to the nearest that supports case comparison\n    if ((spec.caseLevel || false) === true) {\n        if (localeOpt.sensitivity === \"base\")\n            localeOpt.sensitivity = \"case\";\n        if (localeOpt.sensitivity === \"accent\")\n            localeOpt.sensitivity = \"variant\";\n    }\n    const collator = new Intl.Collator(spec.locale, localeOpt);\n    return (a, b) => {\n        // non strings\n        if (!isString(a) || !isString(b))\n            return compare(a, b);\n        // only for strings\n        const i = collator.compare(a, b);\n        if (i < 0)\n            return -1;\n        if (i > 0)\n            return 1;\n        return 0;\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}