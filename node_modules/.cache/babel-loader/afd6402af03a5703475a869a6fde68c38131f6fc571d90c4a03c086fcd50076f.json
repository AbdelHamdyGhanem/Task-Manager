{"ast":null,"code":"import { getStateSet } from './states/index.js';\nimport { actionFunctions, orderedActionList } from './actions/index.js';\nimport { resolveInput } from './bdd/bdd.generated.js';\nexport * from './states/index.js';\nexport * from './util.js';\nexport * from './actions/index.js';\nexport function calculateActionFromMap(stateSetToActionMap, input) {\n  const stateSet = getStateSet(input);\n  const actionName = stateSetToActionMap.get(stateSet);\n  if (!actionName) {\n    return {\n      action: 'runFullQueryAgain',\n      stateSet\n    };\n  } else {\n    return {\n      action: actionName,\n      stateSet\n    };\n  }\n}\nexport function calculateActionName(input) {\n  const resolvedActionId = resolveInput(input);\n  return orderedActionList[resolvedActionId];\n}\nexport function calculateActionFunction(input) {\n  const actionName = calculateActionName(input);\n  return actionFunctions[actionName];\n}\n/**\n * for performance reasons,\n * @mutates the input\n * @returns the new results\n */\nexport function runAction(action, queryParams, changeEvent, previousResults, keyDocumentMap) {\n  const fn = actionFunctions[action];\n  fn({\n    queryParams,\n    changeEvent,\n    previousResults,\n    keyDocumentMap\n  });\n  return previousResults;\n}","map":{"version":3,"names":["getStateSet","actionFunctions","orderedActionList","resolveInput","calculateActionFromMap","stateSetToActionMap","input","stateSet","actionName","get","action","calculateActionName","resolvedActionId","calculateActionFunction","runAction","queryParams","changeEvent","previousResults","keyDocumentMap","fn"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/event-reduce-js/src/index.ts"],"sourcesContent":["import type {\n    ChangeEvent,\n    ActionName,\n    ResultKeyDocumentMap,\n    QueryParams,\n    StateSetToActionMap,\n    StateSet,\n    ActionFunction,\n    StateResolveFunctionInput\n} from './types/index.js';\nimport { getStateSet } from './states/index.js';\nimport { actionFunctions, orderedActionList } from './actions/index.js';\nimport { resolveInput } from './bdd/bdd.generated.js';\n\n/**\n * Export as type to ensure we do not\n * end with an import statement in the build output\n * which would increase the build size.\n */\nexport type {\n    ActionFunction,\n    ActionFunctionInput,\n    ActionName,\n    ChangeEvent,\n    ChangeEventBase,\n    ChangeEventDelete,\n    ChangeEventInsert,\n    ChangeEventUpdate,\n    MongoQuery,\n    QueryMatcher,\n    QueryParams,\n    ResultKeyDocumentMap,\n    DeterministicSortComparator,\n    StateName,\n    StateResolveFunction,\n    StateResolveFunctionInput,\n    StateSet,\n    StateSetToActionMap,\n    WriteOperation\n} from './types/index.js';\n\nexport * from './states/index.js';\nexport * from './util.js';\nexport * from './actions/index.js';\n\nexport function calculateActionFromMap<DocType>(\n    stateSetToActionMap: StateSetToActionMap,\n    input: StateResolveFunctionInput<DocType>\n): {\n    action: ActionName,\n    stateSet: StateSet\n} {\n    const stateSet: StateSet = getStateSet(input);\n    const actionName = stateSetToActionMap.get(stateSet);\n    if (!actionName) {\n        return {\n            action: 'runFullQueryAgain',\n            stateSet\n        };\n    } else {\n        return {\n            action: actionName,\n            stateSet\n        };\n    }\n}\n\nexport function calculateActionName<DocType>(\n    input: StateResolveFunctionInput<DocType>\n): ActionName {\n    const resolvedActionId = resolveInput(\n        input\n    );\n    return orderedActionList[resolvedActionId];\n}\n\nexport function calculateActionFunction<DocType>(\n    input: StateResolveFunctionInput<DocType>\n): ActionFunction<DocType> {\n    const actionName = calculateActionName(input);\n    return actionFunctions[actionName];\n}\n\n/**\n * for performance reasons,\n * @mutates the input\n * @returns the new results\n */\nexport function runAction<DocType>(\n    action: ActionName,\n    queryParams: QueryParams<DocType>,\n    changeEvent: ChangeEvent<DocType>,\n    previousResults: DocType[],\n    keyDocumentMap?: ResultKeyDocumentMap<DocType>\n): DocType[] {\n    const fn: ActionFunction<DocType> = actionFunctions[action];\n    fn({\n        queryParams,\n        changeEvent,\n        previousResults,\n        keyDocumentMap\n    });\n    return previousResults;\n}\n"],"mappings":"AAUA,SAASA,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,oBAAoB;AACvE,SAASC,YAAY,QAAQ,wBAAwB;AA6BrD,cAAc,mBAAmB;AACjC,cAAc,WAAW;AACzB,cAAc,oBAAoB;AAElC,OAAM,SAAUC,sBAAsBA,CAClCC,mBAAwC,EACxCC,KAAyC;EAKzC,MAAMC,QAAQ,GAAaP,WAAW,CAACM,KAAK,CAAC;EAC7C,MAAME,UAAU,GAAGH,mBAAmB,CAACI,GAAG,CAACF,QAAQ,CAAC;EACpD,IAAI,CAACC,UAAU,EAAE;IACb,OAAO;MACHE,MAAM,EAAE,mBAAmB;MAC3BH;KACH;GACJ,MAAM;IACH,OAAO;MACHG,MAAM,EAAEF,UAAU;MAClBD;KACH;;AAET;AAEA,OAAM,SAAUI,mBAAmBA,CAC/BL,KAAyC;EAEzC,MAAMM,gBAAgB,GAAGT,YAAY,CACjCG,KAAK,CACR;EACD,OAAOJ,iBAAiB,CAACU,gBAAgB,CAAC;AAC9C;AAEA,OAAM,SAAUC,uBAAuBA,CACnCP,KAAyC;EAEzC,MAAME,UAAU,GAAGG,mBAAmB,CAACL,KAAK,CAAC;EAC7C,OAAOL,eAAe,CAACO,UAAU,CAAC;AACtC;AAEA;;;;;AAKA,OAAM,SAAUM,SAASA,CACrBJ,MAAkB,EAClBK,WAAiC,EACjCC,WAAiC,EACjCC,eAA0B,EAC1BC,cAA8C;EAE9C,MAAMC,EAAE,GAA4BlB,eAAe,CAACS,MAAM,CAAC;EAC3DS,EAAE,CAAC;IACCJ,WAAW;IACXC,WAAW;IACXC,eAAe;IACfC;GACH,CAAC;EACF,OAAOD,eAAe;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}