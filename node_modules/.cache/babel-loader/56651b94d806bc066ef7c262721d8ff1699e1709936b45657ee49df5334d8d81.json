{"ast":null,"code":"// https://www.mongodb.com/docs/manual/reference/operator/aggregation/lastN/\nimport { ComputeOptions, computeValue } from \"../../core\";\nimport { $push } from \"./push\";\n/**\n * Returns an aggregation of the last n elements within a group. The elements returned are meaningful only if in a specified sort order.\n * If the group contains fewer than n elements, $lastN returns all elements in the group.\n *\n * @param {Array} collection The input array\n * @param {Object} expr The right-hand side expression value of the operator\n * @param {Options} options The options to use for this operation\n * @returns {*}\n */\nexport const $lastN = (collection, expr, options) => {\n  var _a;\n  const copts = ComputeOptions.init(options);\n  const m = collection.length;\n  const n = computeValue((_a = copts === null || copts === void 0 ? void 0 : copts.local) === null || _a === void 0 ? void 0 : _a.groupId, expr.n, null, copts);\n  return $push(m <= n ? collection : collection.slice(m - n), expr.input, options);\n};","map":{"version":3,"names":["ComputeOptions","computeValue","$push","$lastN","collection","expr","options","_a","copts","init","m","length","n","local","groupId","slice","input"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/accumulator/lastN.js"],"sourcesContent":["// https://www.mongodb.com/docs/manual/reference/operator/aggregation/lastN/\nimport { ComputeOptions, computeValue } from \"../../core\";\nimport { $push } from \"./push\";\n/**\n * Returns an aggregation of the last n elements within a group. The elements returned are meaningful only if in a specified sort order.\n * If the group contains fewer than n elements, $lastN returns all elements in the group.\n *\n * @param {Array} collection The input array\n * @param {Object} expr The right-hand side expression value of the operator\n * @param {Options} options The options to use for this operation\n * @returns {*}\n */\nexport const $lastN = (collection, expr, options) => {\n    var _a;\n    const copts = ComputeOptions.init(options);\n    const m = collection.length;\n    const n = computeValue((_a = copts === null || copts === void 0 ? void 0 : copts.local) === null || _a === void 0 ? void 0 : _a.groupId, expr.n, null, copts);\n    return $push(m <= n ? collection : collection.slice(m - n), expr.input, options);\n};\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,YAAY,QAAQ,YAAY;AACzD,SAASC,KAAK,QAAQ,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAACC,UAAU,EAAEC,IAAI,EAAEC,OAAO,KAAK;EACjD,IAAIC,EAAE;EACN,MAAMC,KAAK,GAAGR,cAAc,CAACS,IAAI,CAACH,OAAO,CAAC;EAC1C,MAAMI,CAAC,GAAGN,UAAU,CAACO,MAAM;EAC3B,MAAMC,CAAC,GAAGX,YAAY,CAAC,CAACM,EAAE,GAAGC,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACK,KAAK,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACO,OAAO,EAAET,IAAI,CAACO,CAAC,EAAE,IAAI,EAAEJ,KAAK,CAAC;EAC7J,OAAON,KAAK,CAACQ,CAAC,IAAIE,CAAC,GAAGR,UAAU,GAAGA,UAAU,CAACW,KAAK,CAACL,CAAC,GAAGE,CAAC,CAAC,EAAEP,IAAI,CAACW,KAAK,EAAEV,OAAO,CAAC;AACpF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}