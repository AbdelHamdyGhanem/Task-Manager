{"ast":null,"code":"// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { assert, has, isArray, isObject } from \"../../../util\";\n/**\n * Converts an array of key value pairs to a document.\n */\nexport const $arrayToObject = (obj, expr, options) => {\n  const arr = computeValue(obj, expr, null, options);\n  assert(isArray(arr), \"$arrayToObject expression must resolve to an array\");\n  return arr.reduce((newObj, val) => {\n    // flatten\n    while (isArray(val) && val.length === 1) val = val[0];\n    if (val instanceof Array && val.length == 2) {\n      newObj[val[0]] = val[1];\n    } else {\n      const valObj = val;\n      assert(isObject(valObj) && has(valObj, \"k\") && has(valObj, \"v\"), \"$arrayToObject expression is invalid.\");\n      newObj[valObj.k] = valObj.v;\n    }\n    return newObj;\n  }, {});\n};","map":{"version":3,"names":["computeValue","assert","has","isArray","isObject","$arrayToObject","obj","expr","options","arr","reduce","newObj","val","length","Array","valObj","k","v"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/array/arrayToObject.js"],"sourcesContent":["// Array Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { assert, has, isArray, isObject } from \"../../../util\";\n/**\n * Converts an array of key value pairs to a document.\n */\nexport const $arrayToObject = (obj, expr, options) => {\n    const arr = computeValue(obj, expr, null, options);\n    assert(isArray(arr), \"$arrayToObject expression must resolve to an array\");\n    return arr.reduce((newObj, val) => {\n        // flatten\n        while (isArray(val) && val.length === 1)\n            val = val[0];\n        if (val instanceof Array && val.length == 2) {\n            newObj[val[0]] = val[1];\n        }\n        else {\n            const valObj = val;\n            assert(isObject(valObj) && has(valObj, \"k\") && has(valObj, \"v\"), \"$arrayToObject expression is invalid.\");\n            newObj[valObj.k] = valObj.v;\n        }\n        return newObj;\n    }, {});\n};\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,GAAG,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,eAAe;AAC9D;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAClD,MAAMC,GAAG,GAAGT,YAAY,CAACM,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EAClDP,MAAM,CAACE,OAAO,CAACM,GAAG,CAAC,EAAE,oDAAoD,CAAC;EAC1E,OAAOA,GAAG,CAACC,MAAM,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;IAC/B;IACA,OAAOT,OAAO,CAACS,GAAG,CAAC,IAAIA,GAAG,CAACC,MAAM,KAAK,CAAC,EACnCD,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC;IAChB,IAAIA,GAAG,YAAYE,KAAK,IAAIF,GAAG,CAACC,MAAM,IAAI,CAAC,EAAE;MACzCF,MAAM,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;IAC3B,CAAC,MACI;MACD,MAAMG,MAAM,GAAGH,GAAG;MAClBX,MAAM,CAACG,QAAQ,CAACW,MAAM,CAAC,IAAIb,GAAG,CAACa,MAAM,EAAE,GAAG,CAAC,IAAIb,GAAG,CAACa,MAAM,EAAE,GAAG,CAAC,EAAE,uCAAuC,CAAC;MACzGJ,MAAM,CAACI,MAAM,CAACC,CAAC,CAAC,GAAGD,MAAM,CAACE,CAAC;IAC/B;IACA,OAAON,MAAM;EACjB,CAAC,EAAE,CAAC,CAAC,CAAC;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}