{"ast":null,"code":"// https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortArray/#mongodb-expression-exp.-sortArray\nimport { Aggregator } from \"../../../aggregator\";\nimport { computeValue } from \"../../../core\";\nimport { assert, compare, isArray, isNil, isObject } from \"../../../util\";\n/**\n * Sorts an array based on its elements. The sort order is user specified.\n *\n * @param obj The target object\n * @param expr The expression argument\n * @param options Options\n * @returns\n */\nexport const $sortArray = (obj, expr, options) => {\n  const {\n    input,\n    sortBy\n  } = computeValue(obj, expr, null, options);\n  if (isNil(input)) return null;\n  assert(isArray(input), \"$sortArray expression must resolve to an array\");\n  if (isObject(sortBy)) {\n    return new Aggregator([{\n      $sort: sortBy\n    }]).run(input);\n  }\n  const result = [...input];\n  result.sort(compare);\n  if (sortBy === -1) result.reverse();\n  return result;\n};","map":{"version":3,"names":["Aggregator","computeValue","assert","compare","isArray","isNil","isObject","$sortArray","obj","expr","options","input","sortBy","$sort","run","result","sort","reverse"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/array/sortArray.js"],"sourcesContent":["// https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortArray/#mongodb-expression-exp.-sortArray\nimport { Aggregator } from \"../../../aggregator\";\nimport { computeValue } from \"../../../core\";\nimport { assert, compare, isArray, isNil, isObject } from \"../../../util\";\n/**\n * Sorts an array based on its elements. The sort order is user specified.\n *\n * @param obj The target object\n * @param expr The expression argument\n * @param options Options\n * @returns\n */\nexport const $sortArray = (obj, expr, options) => {\n    const { input, sortBy } = computeValue(obj, expr, null, options);\n    if (isNil(input))\n        return null;\n    assert(isArray(input), \"$sortArray expression must resolve to an array\");\n    if (isObject(sortBy)) {\n        return new Aggregator([{ $sort: sortBy }]).run(input);\n    }\n    const result = [...input];\n    result.sort(compare);\n    if (sortBy === -1)\n        result.reverse();\n    return result;\n};\n"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,qBAAqB;AAChD,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC9C,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGX,YAAY,CAACO,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EAChE,IAAIL,KAAK,CAACM,KAAK,CAAC,EACZ,OAAO,IAAI;EACfT,MAAM,CAACE,OAAO,CAACO,KAAK,CAAC,EAAE,gDAAgD,CAAC;EACxE,IAAIL,QAAQ,CAACM,MAAM,CAAC,EAAE;IAClB,OAAO,IAAIZ,UAAU,CAAC,CAAC;MAAEa,KAAK,EAAED;IAAO,CAAC,CAAC,CAAC,CAACE,GAAG,CAACH,KAAK,CAAC;EACzD;EACA,MAAMI,MAAM,GAAG,CAAC,GAAGJ,KAAK,CAAC;EACzBI,MAAM,CAACC,IAAI,CAACb,OAAO,CAAC;EACpB,IAAIS,MAAM,KAAK,CAAC,CAAC,EACbG,MAAM,CAACE,OAAO,CAAC,CAAC;EACpB,OAAOF,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}