{"ast":null,"code":"// Date Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#date-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { adjustDate, isoWeek, isoWeekYear, parseTimezone } from \"./_internal\";\n/**\n * Returns a document that contains the constituent parts of a given Date value as individual properties.\n * The properties returned are year, month, day, hour, minute, second and millisecond.\n *\n * @param obj\n * @param expr\n * @param options\n */\nexport const $dateToParts = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const d = new Date(args.date);\n  const tz = parseTimezone(args.timezone);\n  adjustDate(d, tz);\n  const timePart = {\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n  if (args.iso8601 == true) {\n    return Object.assign(timePart, {\n      isoWeekYear: isoWeekYear(d),\n      isoWeek: isoWeek(d),\n      isoDayOfWeek: d.getUTCDay() || 7\n    });\n  }\n  return Object.assign(timePart, {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate()\n  });\n};","map":{"version":3,"names":["computeValue","adjustDate","isoWeek","isoWeekYear","parseTimezone","$dateToParts","obj","expr","options","args","d","Date","date","tz","timezone","timePart","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds","millisecond","getUTCMilliseconds","iso8601","Object","assign","isoDayOfWeek","getUTCDay","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/date/dateToParts.js"],"sourcesContent":["// Date Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#date-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { adjustDate, isoWeek, isoWeekYear, parseTimezone } from \"./_internal\";\n/**\n * Returns a document that contains the constituent parts of a given Date value as individual properties.\n * The properties returned are year, month, day, hour, minute, second and millisecond.\n *\n * @param obj\n * @param expr\n * @param options\n */\nexport const $dateToParts = (obj, expr, options) => {\n    const args = computeValue(obj, expr, null, options);\n    const d = new Date(args.date);\n    const tz = parseTimezone(args.timezone);\n    adjustDate(d, tz);\n    const timePart = {\n        hour: d.getUTCHours(),\n        minute: d.getUTCMinutes(),\n        second: d.getUTCSeconds(),\n        millisecond: d.getUTCMilliseconds()\n    };\n    if (args.iso8601 == true) {\n        return Object.assign(timePart, {\n            isoWeekYear: isoWeekYear(d),\n            isoWeek: isoWeek(d),\n            isoDayOfWeek: d.getUTCDay() || 7\n        });\n    }\n    return Object.assign(timePart, {\n        year: d.getUTCFullYear(),\n        month: d.getUTCMonth() + 1,\n        day: d.getUTCDate()\n    });\n};\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,UAAU,EAAEC,OAAO,EAAEC,WAAW,EAAEC,aAAa,QAAQ,aAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAChD,MAAMC,IAAI,GAAGT,YAAY,CAACM,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;EACnD,MAAME,CAAC,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC;EAC7B,MAAMC,EAAE,GAAGT,aAAa,CAACK,IAAI,CAACK,QAAQ,CAAC;EACvCb,UAAU,CAACS,CAAC,EAAEG,EAAE,CAAC;EACjB,MAAME,QAAQ,GAAG;IACbC,IAAI,EAAEN,CAAC,CAACO,WAAW,CAAC,CAAC;IACrBC,MAAM,EAAER,CAAC,CAACS,aAAa,CAAC,CAAC;IACzBC,MAAM,EAAEV,CAAC,CAACW,aAAa,CAAC,CAAC;IACzBC,WAAW,EAAEZ,CAAC,CAACa,kBAAkB,CAAC;EACtC,CAAC;EACD,IAAId,IAAI,CAACe,OAAO,IAAI,IAAI,EAAE;IACtB,OAAOC,MAAM,CAACC,MAAM,CAACX,QAAQ,EAAE;MAC3BZ,WAAW,EAAEA,WAAW,CAACO,CAAC,CAAC;MAC3BR,OAAO,EAAEA,OAAO,CAACQ,CAAC,CAAC;MACnBiB,YAAY,EAAEjB,CAAC,CAACkB,SAAS,CAAC,CAAC,IAAI;IACnC,CAAC,CAAC;EACN;EACA,OAAOH,MAAM,CAACC,MAAM,CAACX,QAAQ,EAAE;IAC3Bc,IAAI,EAAEnB,CAAC,CAACoB,cAAc,CAAC,CAAC;IACxBC,KAAK,EAAErB,CAAC,CAACsB,WAAW,CAAC,CAAC,GAAG,CAAC;IAC1BC,GAAG,EAAEvB,CAAC,CAACwB,UAAU,CAAC;EACtB,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}