{"ast":null,"code":"/**\n * Conditional Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#conditional-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { assert, isObject, truthy } from \"../../../util\";\n/**\n * A ternary operator that evaluates one expression,\n * and depending on the result returns the value of one following expressions.\n *\n * @param obj\n * @param expr\n */\nexport const $cond = (obj, expr, options) => {\n  let ifExpr;\n  let thenExpr;\n  let elseExpr;\n  const errorMsg = \"$cond: invalid arguments\";\n  if (expr instanceof Array) {\n    assert(expr.length === 3, errorMsg);\n    ifExpr = expr[0];\n    thenExpr = expr[1];\n    elseExpr = expr[2];\n  } else {\n    assert(isObject(expr), errorMsg);\n    ifExpr = expr.if;\n    thenExpr = expr.then;\n    elseExpr = expr.else;\n  }\n  const condition = truthy(computeValue(obj, ifExpr, null, options), options.useStrictMode);\n  return computeValue(obj, condition ? thenExpr : elseExpr, null, options);\n};","map":{"version":3,"names":["computeValue","assert","isObject","truthy","$cond","obj","expr","options","ifExpr","thenExpr","elseExpr","errorMsg","Array","length","if","then","else","condition","useStrictMode"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/conditional/cond.js"],"sourcesContent":["/**\n * Conditional Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#conditional-expression-operators\n */\nimport { computeValue } from \"../../../core\";\nimport { assert, isObject, truthy } from \"../../../util\";\n/**\n * A ternary operator that evaluates one expression,\n * and depending on the result returns the value of one following expressions.\n *\n * @param obj\n * @param expr\n */\nexport const $cond = (obj, expr, options) => {\n    let ifExpr;\n    let thenExpr;\n    let elseExpr;\n    const errorMsg = \"$cond: invalid arguments\";\n    if (expr instanceof Array) {\n        assert(expr.length === 3, errorMsg);\n        ifExpr = expr[0];\n        thenExpr = expr[1];\n        elseExpr = expr[2];\n    }\n    else {\n        assert(isObject(expr), errorMsg);\n        ifExpr = expr.if;\n        thenExpr = expr.then;\n        elseExpr = expr.else;\n    }\n    const condition = truthy(computeValue(obj, ifExpr, null, options), options.useStrictMode);\n    return computeValue(obj, condition ? thenExpr : elseExpr, null, options);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;EACzC,IAAIC,MAAM;EACV,IAAIC,QAAQ;EACZ,IAAIC,QAAQ;EACZ,MAAMC,QAAQ,GAAG,0BAA0B;EAC3C,IAAIL,IAAI,YAAYM,KAAK,EAAE;IACvBX,MAAM,CAACK,IAAI,CAACO,MAAM,KAAK,CAAC,EAAEF,QAAQ,CAAC;IACnCH,MAAM,GAAGF,IAAI,CAAC,CAAC,CAAC;IAChBG,QAAQ,GAAGH,IAAI,CAAC,CAAC,CAAC;IAClBI,QAAQ,GAAGJ,IAAI,CAAC,CAAC,CAAC;EACtB,CAAC,MACI;IACDL,MAAM,CAACC,QAAQ,CAACI,IAAI,CAAC,EAAEK,QAAQ,CAAC;IAChCH,MAAM,GAAGF,IAAI,CAACQ,EAAE;IAChBL,QAAQ,GAAGH,IAAI,CAACS,IAAI;IACpBL,QAAQ,GAAGJ,IAAI,CAACU,IAAI;EACxB;EACA,MAAMC,SAAS,GAAGd,MAAM,CAACH,YAAY,CAACK,GAAG,EAAEG,MAAM,EAAE,IAAI,EAAED,OAAO,CAAC,EAAEA,OAAO,CAACW,aAAa,CAAC;EACzF,OAAOlB,YAAY,CAACK,GAAG,EAAEY,SAAS,GAAGR,QAAQ,GAAGC,QAAQ,EAAE,IAAI,EAAEH,OAAO,CAAC;AAC5E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}