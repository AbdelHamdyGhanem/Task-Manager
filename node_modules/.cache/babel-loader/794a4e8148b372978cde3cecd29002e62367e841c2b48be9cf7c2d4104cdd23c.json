{"ast":null,"code":"/**\n * copied and adapted from npm 'binary-search-insert'\n * @link https://www.npmjs.com/package/binary-search-insert\n */\nexport function pushAtSortPosition(array, item, compareFunction, low) {\n  var length = array.length;\n  var high = length - 1;\n  var mid = 0;\n\n  /**\n   * Optimization shortcut.\n   */\n  if (length === 0) {\n    array.push(item);\n    return 0;\n  }\n\n  /**\n   * So we do not have to get the ret[mid] doc again\n   * at the last we store it here.\n   */\n  var lastMidDoc;\n  while (low <= high) {\n    // https://github.com/darkskyapp/binary-search\n    // http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n    mid = low + (high - low >> 1);\n    lastMidDoc = array[mid];\n    if (compareFunction(lastMidDoc, item) <= 0.0) {\n      // searching too low\n      low = mid + 1;\n    } else {\n      // searching too high\n      high = mid - 1;\n    }\n  }\n  if (compareFunction(lastMidDoc, item) <= 0.0) {\n    mid++;\n  }\n\n  /**\n   * Insert at correct position\n   */\n  array.splice(mid, 0, item);\n  return mid;\n}","map":{"version":3,"names":["pushAtSortPosition","array","item","compareFunction","low","length","high","mid","push","lastMidDoc","splice"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/array-push-at-sort-position/dist/esm/index.js"],"sourcesContent":["/**\n * copied and adapted from npm 'binary-search-insert'\n * @link https://www.npmjs.com/package/binary-search-insert\n */\nexport function pushAtSortPosition(array, item, compareFunction, low) {\n  var length = array.length;\n  var high = length - 1;\n  var mid = 0;\n\n  /**\n   * Optimization shortcut.\n   */\n  if (length === 0) {\n    array.push(item);\n    return 0;\n  }\n\n  /**\n   * So we do not have to get the ret[mid] doc again\n   * at the last we store it here.\n   */\n  var lastMidDoc;\n  while (low <= high) {\n    // https://github.com/darkskyapp/binary-search\n    // http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n    mid = low + (high - low >> 1);\n    lastMidDoc = array[mid];\n    if (compareFunction(lastMidDoc, item) <= 0.0) {\n      // searching too low\n      low = mid + 1;\n    } else {\n      // searching too high\n      high = mid - 1;\n    }\n  }\n  if (compareFunction(lastMidDoc, item) <= 0.0) {\n    mid++;\n  }\n\n  /**\n   * Insert at correct position\n   */\n  array.splice(mid, 0, item);\n  return mid;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,kBAAkBA,CAACC,KAAK,EAAEC,IAAI,EAAEC,eAAe,EAAEC,GAAG,EAAE;EACpE,IAAIC,MAAM,GAAGJ,KAAK,CAACI,MAAM;EACzB,IAAIC,IAAI,GAAGD,MAAM,GAAG,CAAC;EACrB,IAAIE,GAAG,GAAG,CAAC;;EAEX;AACF;AACA;EACE,IAAIF,MAAM,KAAK,CAAC,EAAE;IAChBJ,KAAK,CAACO,IAAI,CAACN,IAAI,CAAC;IAChB,OAAO,CAAC;EACV;;EAEA;AACF;AACA;AACA;EACE,IAAIO,UAAU;EACd,OAAOL,GAAG,IAAIE,IAAI,EAAE;IAClB;IACA;IACAC,GAAG,GAAGH,GAAG,IAAIE,IAAI,GAAGF,GAAG,IAAI,CAAC,CAAC;IAC7BK,UAAU,GAAGR,KAAK,CAACM,GAAG,CAAC;IACvB,IAAIJ,eAAe,CAACM,UAAU,EAAEP,IAAI,CAAC,IAAI,GAAG,EAAE;MAC5C;MACAE,GAAG,GAAGG,GAAG,GAAG,CAAC;IACf,CAAC,MAAM;MACL;MACAD,IAAI,GAAGC,GAAG,GAAG,CAAC;IAChB;EACF;EACA,IAAIJ,eAAe,CAACM,UAAU,EAAEP,IAAI,CAAC,IAAI,GAAG,EAAE;IAC5CK,GAAG,EAAE;EACP;;EAEA;AACF;AACA;EACEN,KAAK,CAACS,MAAM,CAACH,GAAG,EAAE,CAAC,EAAEL,IAAI,CAAC;EAC1B,OAAOK,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}