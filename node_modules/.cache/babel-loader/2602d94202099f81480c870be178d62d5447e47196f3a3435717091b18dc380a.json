{"ast":null,"code":"// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { MingoError } from \"../../../types\";\nconst FIXED_POINTS = {\n  undefined: null,\n  null: null,\n  NaN: NaN,\n  Infinity: new Error(),\n  \"-Infinity\": new Error()\n};\n/**\n * Returns an operator for a given trignometric function\n *\n * @param f The trignometric function\n */\nexport function createTrignometryOperator(f, fixedPoints = FIXED_POINTS) {\n  const fp = Object.assign({}, FIXED_POINTS, fixedPoints);\n  const keySet = new Set(Object.keys(fp));\n  return (obj, expr, options) => {\n    const n = computeValue(obj, expr, null, options);\n    if (keySet.has(`${n}`)) {\n      const res = fp[`${n}`];\n      if (res instanceof Error) {\n        throw new MingoError(`cannot apply $${f.name} to -inf, value must in (-inf,inf)`);\n      }\n      return res;\n    }\n    return f(n);\n  };\n}","map":{"version":3,"names":["computeValue","MingoError","FIXED_POINTS","undefined","null","NaN","Infinity","Error","createTrignometryOperator","f","fixedPoints","fp","Object","assign","keySet","Set","keys","obj","expr","options","n","has","res","name"],"sources":["/Users/abdelghanem/Desktop/tasker/node_modules/mingo/dist/esm/operators/expression/trignometry/_internal.js"],"sourcesContent":["// Trignometry Expression Operators: https://docs.mongodb.com/manual/reference/operator/aggregation/#trigonometry-expression-operators\nimport { computeValue } from \"../../../core\";\nimport { MingoError } from \"../../../types\";\nconst FIXED_POINTS = {\n    undefined: null,\n    null: null,\n    NaN: NaN,\n    Infinity: new Error(),\n    \"-Infinity\": new Error()\n};\n/**\n * Returns an operator for a given trignometric function\n *\n * @param f The trignometric function\n */\nexport function createTrignometryOperator(f, fixedPoints = FIXED_POINTS) {\n    const fp = Object.assign({}, FIXED_POINTS, fixedPoints);\n    const keySet = new Set(Object.keys(fp));\n    return (obj, expr, options) => {\n        const n = computeValue(obj, expr, null, options);\n        if (keySet.has(`${n}`)) {\n            const res = fp[`${n}`];\n            if (res instanceof Error) {\n                throw new MingoError(`cannot apply $${f.name} to -inf, value must in (-inf,inf)`);\n            }\n            return res;\n        }\n        return f(n);\n    };\n}\n"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,eAAe;AAC5C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,MAAMC,YAAY,GAAG;EACjBC,SAAS,EAAE,IAAI;EACfC,IAAI,EAAE,IAAI;EACVC,GAAG,EAAEA,GAAG;EACRC,QAAQ,EAAE,IAAIC,KAAK,CAAC,CAAC;EACrB,WAAW,EAAE,IAAIA,KAAK,CAAC;AAC3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACC,CAAC,EAAEC,WAAW,GAAGR,YAAY,EAAE;EACrE,MAAMS,EAAE,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEX,YAAY,EAAEQ,WAAW,CAAC;EACvD,MAAMI,MAAM,GAAG,IAAIC,GAAG,CAACH,MAAM,CAACI,IAAI,CAACL,EAAE,CAAC,CAAC;EACvC,OAAO,CAACM,GAAG,EAAEC,IAAI,EAAEC,OAAO,KAAK;IAC3B,MAAMC,CAAC,GAAGpB,YAAY,CAACiB,GAAG,EAAEC,IAAI,EAAE,IAAI,EAAEC,OAAO,CAAC;IAChD,IAAIL,MAAM,CAACO,GAAG,CAAC,GAAGD,CAAC,EAAE,CAAC,EAAE;MACpB,MAAME,GAAG,GAAGX,EAAE,CAAC,GAAGS,CAAC,EAAE,CAAC;MACtB,IAAIE,GAAG,YAAYf,KAAK,EAAE;QACtB,MAAM,IAAIN,UAAU,CAAC,iBAAiBQ,CAAC,CAACc,IAAI,oCAAoC,CAAC;MACrF;MACA,OAAOD,GAAG;IACd;IACA,OAAOb,CAAC,CAACW,CAAC,CAAC;EACf,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}